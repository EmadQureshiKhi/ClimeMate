import { IField } from '@noble/curves/abstract/modular';
import { CurveFn } from '@noble/curves/abstract/edwards';
import * as anchor from '@coral-xyz/anchor';
import { AnchorProvider, Program, BN } from '@coral-xyz/anchor';
import { PublicKey, Finality } from '@solana/web3.js';
export { x25519 } from '@noble/curves/ed25519';

/**
 * Scalar field prime modulus for Curve25519: 2^252 + 27742317777372353535851937790883648493
 */
declare const CURVE25519_SCALAR_FIELD_MODULUS: bigint;
/**
 * Generates a random value within the field bound by q.
 * @param q - The upper bound (exclusive) for the random value.
 * @returns A random bigint value between 0 and q-1.
 */
declare function generateRandomFieldElem(q: bigint): bigint;
/**
 * Computes the positive modulo of a over m.
 * @param a - The dividend.
 * @param m - The modulus.
 * @returns The positive remainder of a mod m.
 */
declare function positiveModulo(a: bigint, m: bigint): bigint;
/**
 * Serializes a bigint to a little-endian Uint8Array of the specified length.
 * @param val - The bigint value to serialize.
 * @param lengthInBytes - The desired length of the output array.
 * @returns The serialized value as a Uint8Array.
 * @throws Error if the value is too large for the specified length.
 */
declare function serializeLE(val: bigint, lengthInBytes: number): Uint8Array;
/**
 * Deserializes a little-endian Uint8Array to a bigint.
 * @param bytes - The Uint8Array to deserialize.
 * @returns The deserialized bigint value.
 */
declare function deserializeLE(bytes: Uint8Array): bigint;
/**
 * Computes the SHA-256 hash of an array of Uint8Arrays.
 * @param byteArrays - The arrays to hash.
 * @returns The SHA-256 hash as a Buffer.
 */
declare function sha256(byteArrays: Uint8Array[]): Buffer;

/**
 * Matrix class over FpField. Data is row-major.
 */
declare class Matrix {
    field: FpField;
    data: readonly bigint[][];
    constructor(field: FpField, data: readonly bigint[][]);
    /**
     * Matrix multiplication between `this` and `rhs`.
     */
    matMul(rhs: Matrix): Matrix;
    /**
     * Element-wise addition between `this` and `rhs`.
     */
    add(rhs: Matrix, ct?: boolean): Matrix;
    /**
     * Element-wise subtraction between `this` and `rhs`.
     */
    sub(rhs: Matrix, ct?: boolean): Matrix;
    /**
     * Raises each element of `this` to the power `e`.
     */
    pow(e: bigint): Matrix;
    /**
     * computs the determinant using gaus elimination
     * matches the determinant implementation in arcis
     */
    det(): bigint;
    is_square(): boolean;
}
declare function randMatrix(field: FpField, nrows: number, ncols: number): Matrix;

/**
 * Represents the operational mode for the Rescue cryptographic primitive.
 * Can be either a block cipher mode with a key, or a hash function mode with parameters.
 */
type RescueMode = BlockCipher | HashFunction;
/**
 * Block cipher mode configuration for Rescue.
 * Uses a key for encryption/decryption operations.
 */
type BlockCipher = {
    kind: 'cipher';
    key: bigint[];
};
/**
 * Hash function mode configuration for Rescue.
 * @param m - The rate (number of field elements absorbed per round).
 * @param capacity - The capacity (number of field elements in the state that are not directly accessible).
 */
type HashFunction = {
    kind: 'hash';
    m: number;
    capacity: number;
};
/**
 * Field type for Curve25519 base field.
 */
type FpField = IField<bigint>;
/**
 * Curve25519 base field as an IField instance.
 */
declare const CURVE25519_BASE_FIELD: FpField;
/**
 * Description and parameters for the Rescue cipher or hash function, including round constants, MDS matrix, and key schedule.
 * See: https://tosc.iacr.org/index.php/ToSC/article/view/8695/8287
 */
declare class RescueDesc {
    mode: RescueMode;
    field: FpField;
    alpha: bigint;
    alphaInverse: bigint;
    nRounds: number;
    m: number;
    mdsMat: Matrix;
    mdsMatInverse: Matrix;
    roundKeys: Matrix[];
    /**
     * Constructs a RescueDesc for a given field and mode (cipher or hash).
     * Initializes round constants, MDS matrix, and key schedule.
     * @param field - The field to use (e.g., CURVE25519_BASE_FIELD).
     * @param mode - The mode: block cipher or hash function.
     */
    constructor(field: FpField, mode: RescueMode);
    /**
     * Samples round constants for the Rescue permutation, using SHAKE256.
     * @param nRounds - The number of rounds.
     * @returns An array of round constant matrices.
     */
    sampleConstants(nRounds: number): Matrix[];
    /**
     * Applies the Rescue permutation to a state matrix.
     * @param state - The input state matrix.
     * @returns The permuted state matrix.
     */
    permute(state: Matrix): Matrix;
    /**
     * Applies the inverse Rescue permutation to a state matrix.
     * @param state - The input state matrix.
     * @returns The inverse-permuted state matrix.
     */
    permuteInverse(state: Matrix): Matrix;
}
declare function toVec(data: bigint[]): bigint[][];

/**
 * The Rescue cipher in Counter (CTR) mode, with a fixed block size m = 5.
 * See: https://tosc.iacr.org/index.php/ToSC/article/view/8695/8287
 */
declare class RescueCipher {
    desc: RescueDesc;
    /**
     * Constructs a RescueCipher instance using a shared secret.
     * The key is derived using HKDF-RescuePrime and used to initialize the RescueDesc.
     * @param sharedSecret - The shared secret to derive the cipher key from.
     */
    constructor(sharedSecret: Uint8Array);
    /**
     * Encrypts the plaintext vector in Counter (CTR) mode (raw, returns bigints).
     * @param plaintext - The array of plaintext bigints to encrypt.
     * @param nonce - A 16-byte nonce for CTR mode.
     * @returns The ciphertext as an array of bigints.
     * @throws Error if the nonce is not 16 bytes long.
     */
    encrypt_raw(plaintext: bigint[], nonce: Uint8Array): bigint[];
    /**
     * Encrypts the plaintext vector in Counter (CTR) mode and serializes each block.
     * @param plaintext - The array of plaintext bigints to encrypt.
     * @param nonce - A 16-byte nonce for CTR mode.
     * @returns The ciphertext as an array of arrays of numbers (each 32 bytes).
     */
    encrypt(plaintext: bigint[], nonce: Uint8Array): number[][];
    /**
     * Decrypts the ciphertext vector in Counter (CTR) mode (raw, expects bigints).
     * @param ciphertext - The array of ciphertext bigints to decrypt.
     * @param nonce - A 16-byte nonce for CTR mode.
     * @returns The decrypted plaintext as an array of bigints.
     * @throws Error if the nonce is not 16 bytes long.
     */
    decrypt_raw(ciphertext: bigint[], nonce: Uint8Array): bigint[];
    /**
     * Deserializes and decrypts the ciphertext vector in Counter (CTR) mode.
     * @param ciphertext - The array of arrays of numbers (each 32 bytes) to decrypt.
     * @param nonce - A 16-byte nonce for CTR mode.
     * @returns The decrypted plaintext as an array of bigints.
     */
    decrypt(ciphertext: number[][], nonce: Uint8Array): bigint[];
}

/**
 * The Rescue-Prime hash function, as described in https://eprint.iacr.org/2020/1143.pdf.
 * Used with fixed m = 6 and capacity = 1 (rate = 5). According to Section 2.2, this offers log2(CURVE25519_BASE_FIELD.ORDER) / 2 bits of security against collision, preimage, and second-preimage attacks.
 * See the referenced paper for further details.
 */
declare class RescuePrimeHash {
    desc: RescueDesc;
    rate: number;
    /**
     * Constructs a RescuePrimeHash instance with m = 6 and capacity = 1.
     */
    constructor();
    /**
     * Computes the Rescue-Prime hash of a message, with padding as described in Algorithm 2 of the paper.
     * @param message - The input message as an array of bigints.
     * @returns The hash output as an array of bigints (length = rate).
     */
    digest(message: bigint[]): bigint[];
}

/**
 * Ed25519 curve instance using SHA3-512 for hashing, suitable for MPC (ArcisEd25519 signature scheme).
 * This is essentially Ed25519 but with SHA3-512 instead of SHA-512 for lower multiplicative depth.
 * See: https://datatracker.ietf.org/doc/html/rfc8032#section-5.1
 */
declare const arcisEd25519: CurveFn;

/**
 * AES-128 cipher in Counter (CTR) mode, using HKDF-SHA3-256 to derive the key from a shared secret.
 * See: https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf (Section 6.5) for details on CTR mode.
 */
declare class Aes128Cipher {
    key: Uint8Array;
    /**
     * Constructs an AES-128 cipher instance using a shared secret.
     * The key is derived using HKDF-SHA3-256.
     * @param sharedSecret - The shared secret to derive the AES key from.
     */
    constructor(sharedSecret: Uint8Array);
    /**
     * Encrypts the plaintext array in Counter (CTR) mode.
     * @param plaintext - The data to encrypt.
     * @param nonce - An 8-byte nonce for CTR mode.
     * @returns The encrypted ciphertext as a Uint8Array.
     * @throws Error if the nonce is not 8 bytes long.
     */
    encrypt(plaintext: Uint8Array, nonce: Uint8Array): Uint8Array;
    /**
     * Decrypts the ciphertext array in Counter (CTR) mode.
     * @param ciphertext - The data to decrypt.
     * @param nonce - An 8-byte nonce for CTR mode.
     * @returns The decrypted plaintext as a Uint8Array.
     * @throws Error if the nonce is not 8 bytes long.
     */
    decrypt(ciphertext: Uint8Array, nonce: Uint8Array): Uint8Array;
}

/**
 * AES-192 cipher in Counter (CTR) mode, using HKDF-SHA3-256 to derive the key from a shared secret.
 * See: https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf (Section 6.5) for details on CTR mode.
 */
declare class Aes192Cipher {
    key: Uint8Array;
    /**
     * Constructs an AES-192 cipher instance using a shared secret.
     * The key is derived using HKDF-SHA3-256.
     * @param sharedSecret - The shared secret to derive the AES key from.
     */
    constructor(sharedSecret: Uint8Array);
    /**
     * Encrypts the plaintext array in Counter (CTR) mode.
     * @param plaintext - The data to encrypt.
     * @param nonce - An 8-byte nonce for CTR mode.
     * @returns The encrypted ciphertext as a Uint8Array.
     * @throws Error if the nonce is not 8 bytes long.
     */
    encrypt(plaintext: Uint8Array, nonce: Uint8Array): Uint8Array;
    /**
     * Decrypts the ciphertext array in Counter (CTR) mode.
     * @param ciphertext - The data to decrypt.
     * @param nonce - An 8-byte nonce for CTR mode.
     * @returns The decrypted plaintext as a Uint8Array.
     * @throws Error if the nonce is not 8 bytes long.
     */
    decrypt(ciphertext: Uint8Array, nonce: Uint8Array): Uint8Array;
}

/**
 * AES-256 cipher in Counter (CTR) mode, using HKDF-SHA3-256 to derive the key from a shared secret.
 * See: https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf (Section 6.5) for details on CTR mode.
 */
declare class Aes256Cipher {
    key: Uint8Array;
    /**
     * Constructs an AES-256 cipher instance using a shared secret.
     * The key is derived using HKDF-SHA3-256.
     * @param sharedSecret - The shared secret to derive the AES key from.
     */
    constructor(sharedSecret: Uint8Array);
    /**
     * Encrypts the plaintext array in Counter (CTR) mode.
     * @param plaintext - The data to encrypt.
     * @param nonce - An 8-byte nonce for CTR mode.
     * @returns The encrypted ciphertext as a Uint8Array.
     * @throws Error if the nonce is not 8 bytes long.
     */
    encrypt(plaintext: Uint8Array, nonce: Uint8Array): Uint8Array;
    /**
     * Decrypts the ciphertext array in Counter (CTR) mode.
     * @param ciphertext - The data to decrypt.
     * @param nonce - An 8-byte nonce for CTR mode.
     * @returns The decrypted plaintext as a Uint8Array.
     * @throws Error if the nonce is not 8 bytes long.
     */
    decrypt(ciphertext: Uint8Array, nonce: Uint8Array): Uint8Array;
}

/**
 * Program IDL in camelCase format in order to be used in JS/TS.
 *
 * Note that this is only a type helper and is not the actual IDL. The original
 * IDL can be found at `target/idl/arcium.json`.
 */
type Arcium = {
    "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6";
    "metadata": {
        "name": "arcium";
        "version": "0.3.0";
        "spec": "0.1.0";
        "description": "The Arcium program";
    };
    "instructions": [
        {
            "name": "activateArx";
            "discriminator": [
                15,
                203,
                48,
                186,
                243,
                85,
                60,
                115
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "arxNodeAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "clock";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                }
            ];
            "args": [
                {
                    "name": "nodeOffset";
                    "type": "u32";
                }
            ];
        },
        {
            "name": "activateCluster";
            "discriminator": [
                228,
                170,
                10,
                172,
                246,
                96,
                63,
                154
            ];
            "accounts": [
                {
                    "name": "authority";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "id";
                            }
                        ];
                    };
                },
                {
                    "name": "clock";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "clusterId";
                    "type": "u32";
                }
            ];
        },
        {
            "name": "bumpEpochCluster";
            "discriminator": [
                172,
                203,
                90,
                207,
                128,
                221,
                229,
                246
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "clusterOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "clock";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                }
            ];
            "args": [
                {
                    "name": "clusterOffset";
                    "type": "u32";
                }
            ];
        },
        {
            "name": "callbackComputation";
            "discriminator": [
                11,
                224,
                42,
                236,
                0,
                154,
                74,
                163
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "node";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "mxe";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    88,
                                    69,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxe.cluster.ok_or(ArciumError :: ClusterNotSet) ? ";
                                "account": "mxeAccount";
                            }
                        ];
                    };
                },
                {
                    "name": "comp";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "compOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "mempool";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    101,
                                    109,
                                    112,
                                    111,
                                    111,
                                    108
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "executingPool";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    69,
                                    120,
                                    101,
                                    99,
                                    112,
                                    111,
                                    111,
                                    108
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "compDefAcc";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "compDefOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                },
                {
                    "name": "instructionsSysvar";
                    "address": "Sysvar1nstructions1111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "compOffset";
                    "type": "u64";
                },
                {
                    "name": "nodeOffset";
                    "type": "u32";
                },
                {
                    "name": "compDefOffset";
                    "type": "u32";
                },
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                },
                {
                    "name": "executionStatus";
                    "type": {
                        "defined": {
                            "name": "executionStatus";
                        };
                    };
                }
            ];
        },
        {
            "name": "deactivateArx";
            "discriminator": [
                117,
                244,
                137,
                148,
                25,
                190,
                175,
                164
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "arxNodeAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "clock";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc0";
                    "optional": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "arx_node_acc.cluster_memberships";
                                "account": "arxNode";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc1";
                    "optional": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "arx_node_acc.cluster_memberships.get(1).ok_or(ArciumError ::\nInvalidClusterMembership) ? ";
                                "account": "arxNode";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc2";
                    "optional": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "arx_node_acc.cluster_memberships.get(2).ok_or(ArciumError ::\nInvalidClusterMembership) ? ";
                                "account": "arxNode";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc3";
                    "optional": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "arx_node_acc.cluster_memberships.get(3).ok_or(ArciumError ::\nInvalidClusterMembership) ? ";
                                "account": "arxNode";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc4";
                    "optional": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "arx_node_acc.cluster_memberships.get(4).ok_or(ArciumError ::\nInvalidClusterMembership) ? ";
                                "account": "arxNode";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc5";
                    "optional": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "arx_node_acc.cluster_memberships.get(5).ok_or(ArciumError ::\nInvalidClusterMembership) ? ";
                                "account": "arxNode";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc6";
                    "optional": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "arx_node_acc.cluster_memberships.get(6).ok_or(ArciumError ::\nInvalidClusterMembership) ? ";
                                "account": "arxNode";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc7";
                    "optional": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "arx_node_acc.cluster_memberships.get(7).ok_or(ArciumError ::\nInvalidClusterMembership) ? ";
                                "account": "arxNode";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc8";
                    "optional": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "arx_node_acc.cluster_memberships.get(8).ok_or(ArciumError ::\nInvalidClusterMembership) ? ";
                                "account": "arxNode";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc9";
                    "optional": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "arx_node_acc.cluster_memberships.get(9).ok_or(ArciumError ::\nInvalidClusterMembership) ? ";
                                "account": "arxNode";
                            }
                        ];
                    };
                }
            ];
            "args": [
                {
                    "name": "nodeOffset";
                    "type": "u32";
                }
            ];
        },
        {
            "name": "deactivateCluster";
            "discriminator": [
                13,
                42,
                182,
                159,
                184,
                10,
                212,
                178
            ];
            "accounts": [
                {
                    "name": "authority";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "id";
                            }
                        ];
                    };
                },
                {
                    "name": "clock";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "clusterId";
                    "type": "u32";
                },
                {
                    "name": "deactivationEpoch";
                    "type": {
                        "defined": {
                            "name": "epoch";
                        };
                    };
                }
            ];
        },
        {
            "name": "dummyInstruction";
            "docs": [
                "Only present so the mempool and execpool accounts are actually included in the idl, since we",
                "don't explicitly declare them in the accounts section of the other instructions."
            ];
            "discriminator": [
                57,
                4,
                200,
                151,
                58,
                19,
                120,
                9
            ];
            "accounts": [
                {
                    "name": "tinyMempool";
                },
                {
                    "name": "tinyExecpool";
                },
                {
                    "name": "smallMempool";
                },
                {
                    "name": "smallExecpool";
                },
                {
                    "name": "mediumMempool";
                },
                {
                    "name": "mediumExecpool";
                },
                {
                    "name": "largeMempool";
                },
                {
                    "name": "largeExecpool";
                }
            ];
            "args": [];
        },
        {
            "name": "embiggenRawCircuitAcc";
            "discriminator": [
                92,
                195,
                192,
                21,
                193,
                242,
                135,
                194
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "compDefAcc";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "compOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "compDefRaw";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    82,
                                    97,
                                    119
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "compDefAcc";
                            },
                            {
                                "kind": "arg";
                                "path": "rawCircuitIndex";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "compOffset";
                    "type": "u32";
                },
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                },
                {
                    "name": "rawCircuitIndex";
                    "type": "u8";
                }
            ];
        },
        {
            "name": "finalizeComputation";
            "discriminator": [
                43,
                29,
                152,
                92,
                241,
                179,
                193,
                210
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "comp";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "compOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "mxe";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    88,
                                    69,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxe.cluster.ok_or(ArciumError :: ClusterNotSet) ? ";
                                "account": "mxeAccount";
                            }
                        ];
                    };
                },
                {
                    "name": "executingPool";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    69,
                                    120,
                                    101,
                                    99,
                                    112,
                                    111,
                                    111,
                                    108
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "mempool";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    101,
                                    109,
                                    112,
                                    111,
                                    111,
                                    108
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "compDefAcc";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "compDefOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "clock";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "compOffset";
                    "type": "u64";
                },
                {
                    "name": "compDefOffset";
                    "type": "u32";
                },
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                }
            ];
        },
        {
            "name": "finalizeComputationDefinition";
            "discriminator": [
                174,
                66,
                159,
                51,
                199,
                243,
                219,
                38
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "compDefAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "compOffset";
                            }
                        ];
                    };
                }
            ];
            "args": [
                {
                    "name": "compOffset";
                    "type": "u32";
                },
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                }
            ];
        },
        {
            "name": "finalizeMxeKeys";
            "discriminator": [
                108,
                137,
                125,
                95,
                202,
                237,
                190,
                158
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "mxe";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    88,
                                    69,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "cluster";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxe.cluster.ok_or(ArciumError :: ClusterNotSet) ? ";
                                "account": "mxeAccount";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                }
            ];
        },
        {
            "name": "increaseMempoolSize";
            "discriminator": [
                19,
                165,
                166,
                25,
                174,
                122,
                166,
                250
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "mempool";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    101,
                                    109,
                                    112,
                                    111,
                                    111,
                                    108
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "mxeProgram";
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [];
        },
        {
            "name": "init";
            "discriminator": [
                220,
                59,
                207,
                236,
                108,
                250,
                47,
                100
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clock";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "feePool";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    70,
                                    101,
                                    101,
                                    80,
                                    111,
                                    111,
                                    108
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "startEpochTimestamp";
                    "type": {
                        "defined": {
                            "name": "timestamp";
                        };
                    };
                }
            ];
        },
        {
            "name": "initArxNode";
            "discriminator": [
                55,
                177,
                212,
                125,
                72,
                118,
                148,
                232
            ];
            "accounts": [
                {
                    "name": "operatorSigner";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "operatorAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    79,
                                    112,
                                    101,
                                    114,
                                    97,
                                    116,
                                    111,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "operatorSigner";
                            }
                        ];
                    };
                },
                {
                    "name": "arxNodeAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "clock";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "nodeOffset";
                    "type": "u32";
                },
                {
                    "name": "config";
                    "type": {
                        "defined": {
                            "name": "arxNodeConfig";
                        };
                    };
                },
                {
                    "name": "cuCapacityClaim";
                    "type": "u64";
                },
                {
                    "name": "metadata";
                    "type": {
                        "defined": {
                            "name": "nodeMetadata";
                        };
                    };
                }
            ];
        },
        {
            "name": "initCluster";
            "discriminator": [
                144,
                230,
                5,
                18,
                93,
                71,
                133,
                187
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "id";
                            }
                        ];
                    };
                },
                {
                    "name": "authority";
                },
                {
                    "name": "poolAccount";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    70,
                                    101,
                                    101,
                                    80,
                                    111,
                                    111,
                                    108
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "clock";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "clusterId";
                    "type": "u32";
                },
                {
                    "name": "maxSize";
                    "type": "u32";
                },
                {
                    "name": "cuPrice";
                    "type": "u64";
                }
            ];
        },
        {
            "name": "initComputationDefinition";
            "docs": [
                "Initializes a computation definition."
            ];
            "discriminator": [
                45,
                185,
                155,
                17,
                97,
                77,
                230,
                73
            ];
            "accounts": [
                {
                    "name": "signer";
                    "docs": [
                        "Signer of the transaction."
                    ];
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "mxe";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    88,
                                    69,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "compDefAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "compOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "docs": [
                        "System program account."
                    ];
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "compOffset";
                    "type": "u32";
                },
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                },
                {
                    "name": "computationDefinition";
                    "type": {
                        "defined": {
                            "name": "computationDefinitionMeta";
                        };
                    };
                },
                {
                    "name": "circuitSourceOverride";
                    "type": {
                        "option": {
                            "defined": {
                                "name": "circuitSource";
                            };
                        };
                    };
                },
                {
                    "name": "cuAmount";
                    "type": "u64";
                },
                {
                    "name": "finalizationAuthority";
                    "type": {
                        "option": "pubkey";
                    };
                },
                {
                    "name": "finalizeDuringCallback";
                    "type": "bool";
                }
            ];
        },
        {
            "name": "initMxe";
            "docs": [
                "Initializes a MPC Execution Environment."
            ];
            "discriminator": [
                240,
                227,
                11,
                166,
                193,
                167,
                25,
                79
            ];
            "accounts": [
                {
                    "name": "signer";
                    "docs": [
                        "Signer of the transaction."
                    ];
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "mxe";
                    "docs": [
                        "MXE account to initialize."
                    ];
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    88,
                                    69,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "mempool";
                    "docs": [
                        "function"
                    ];
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    101,
                                    109,
                                    112,
                                    111,
                                    111,
                                    108
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "execpool";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    69,
                                    120,
                                    101,
                                    99,
                                    112,
                                    111,
                                    111,
                                    108
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "cluster";
                    "docs": [
                        "Cluster to add to the MXE."
                    ];
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "clusterOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "mxeKeygenComputationDefinition";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "const";
                                "value": [
                                    1,
                                    0,
                                    0,
                                    0
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "mxeKeygenComputation";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "const";
                                "value": [
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "mxeAuthority";
                    "optional": true;
                },
                {
                    "name": "mxeProgram";
                    "docs": [
                        "constraint in tests because setting it would require us to deploy a program each time."
                    ];
                },
                {
                    "name": "systemProgram";
                    "docs": [
                        "System program account."
                    ];
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "clusterOffset";
                    "type": "u32";
                },
                {
                    "name": "mempoolSize";
                    "type": {
                        "defined": {
                            "name": "mempoolSize";
                        };
                    };
                }
            ];
        },
        {
            "name": "initOperator";
            "discriminator": [
                132,
                210,
                12,
                91,
                159,
                94,
                35,
                54
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "operatorAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    79,
                                    112,
                                    101,
                                    114,
                                    97,
                                    116,
                                    111,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "signer";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "meta";
                    "type": {
                        "defined": {
                            "name": "operatorMeta";
                        };
                    };
                }
            ];
        },
        {
            "name": "initRawCircuitAcc";
            "discriminator": [
                16,
                228,
                193,
                228,
                93,
                231,
                58,
                4
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "compDefAcc";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "compOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "compDefRaw";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    82,
                                    97,
                                    119
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "compDefAcc";
                            },
                            {
                                "kind": "arg";
                                "path": "rawCircuitIndex";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "compOffset";
                    "type": "u32";
                },
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                },
                {
                    "name": "rawCircuitIndex";
                    "type": "u8";
                }
            ];
        },
        {
            "name": "joinCluster";
            "discriminator": [
                150,
                167,
                124,
                239,
                108,
                128,
                31,
                162
            ];
            "accounts": [
                {
                    "name": "nodeAuthority";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "clusterOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "arxNodeAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "clusterId";
                    "type": "u32";
                },
                {
                    "name": "nodeBump";
                    "type": "u32";
                },
                {
                    "name": "join";
                    "type": "bool";
                }
            ];
        },
        {
            "name": "leaveMxe";
            "discriminator": [
                225,
                222,
                68,
                9,
                96,
                160,
                126,
                211
            ];
            "accounts": [
                {
                    "name": "authority";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "id";
                            }
                        ];
                    };
                },
                {
                    "name": "mxe";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    88,
                                    69,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "clusterOffset";
                    "type": "u32";
                },
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                }
            ];
        },
        {
            "name": "proposeFee";
            "discriminator": [
                103,
                204,
                172,
                134,
                248,
                252,
                27,
                170
            ];
            "accounts": [
                {
                    "name": "nodeAuthority";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "clusterOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "arxNodeAcc";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                }
            ];
            "args": [
                {
                    "name": "clusterOffset";
                    "type": "u32";
                },
                {
                    "name": "nodeOffset";
                    "type": "u32";
                },
                {
                    "name": "proposedFee";
                    "type": "u64";
                }
            ];
        },
        {
            "name": "proposeJoinCluster";
            "discriminator": [
                148,
                228,
                222,
                211,
                161,
                128,
                118,
                175
            ];
            "accounts": [
                {
                    "name": "clusterAuthority";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "clusterOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "arxNodeAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "clock";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "clusterId";
                    "type": "u32";
                },
                {
                    "name": "nodeBump";
                    "type": "u32";
                }
            ];
        },
        {
            "name": "queueComputation";
            "docs": [
                "Queues a computation.",
                "cu_price_micro: The priority price of a CU, in thousandths of a $ARX. Used",
                "to calculate the priority fee and rounded down."
            ];
            "discriminator": [
                1,
                149,
                103,
                13,
                102,
                227,
                93,
                164
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "signSeed";
                    "docs": [
                        "This is ok-ish though, as we're not reading the account, we just need it to check that the",
                        "CPI invocation is valid. The only downside is it's a bit ugly and wastes some CUs since",
                        "we can't use a potentially stored bump."
                    ];
                    "signer": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    83,
                                    105,
                                    103,
                                    110,
                                    101,
                                    114,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                        "program": {
                            "kind": "arg";
                            "path": "mxeProgram";
                        };
                    };
                },
                {
                    "name": "comp";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "computationOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "mxe";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    88,
                                    69,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "executingPool";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    69,
                                    120,
                                    101,
                                    99,
                                    112,
                                    111,
                                    111,
                                    108
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "mempool";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    101,
                                    109,
                                    112,
                                    111,
                                    111,
                                    108
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "compDefAcc";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "computationDefinitionOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "cluster";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "cluster_index.map_or(mxe.cluster.ok_or(ArciumError :: ClusterNotSet) ? , | i |\nmxe.fallback_clusters [i as usize])";
                            }
                        ];
                    };
                },
                {
                    "name": "poolAccount";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    70,
                                    101,
                                    101,
                                    80,
                                    111,
                                    111,
                                    108
                                ];
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                },
                {
                    "name": "clock";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                }
            ];
            "args": [
                {
                    "name": "compOffset";
                    "type": "u64";
                },
                {
                    "name": "computationDefinitionOffset";
                    "type": "u32";
                },
                {
                    "name": "clusterIndex";
                    "type": {
                        "option": "u16";
                    };
                },
                {
                    "name": "args";
                    "type": {
                        "vec": {
                            "defined": {
                                "name": "argument";
                            };
                        };
                    };
                },
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                },
                {
                    "name": "callbackUrl";
                    "type": {
                        "option": "string";
                    };
                },
                {
                    "name": "customCallbackInstructions";
                    "type": {
                        "vec": {
                            "defined": {
                                "name": "callbackInstruction";
                            };
                        };
                    };
                },
                {
                    "name": "inputDeliveryFee";
                    "type": "u64";
                },
                {
                    "name": "outputDeliveryFee";
                    "type": "u64";
                },
                {
                    "name": "cuPriceMicro";
                    "type": "u64";
                }
            ];
        },
        {
            "name": "setArxNodeConfig";
            "discriminator": [
                163,
                75,
                176,
                148,
                145,
                196,
                238,
                234
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "arxNodeAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "nodeOffset";
                    "type": "u32";
                },
                {
                    "name": "config";
                    "type": {
                        "defined": {
                            "name": "arxNodeConfig";
                        };
                    };
                }
            ];
        },
        {
            "name": "setArxNodeMetadata";
            "discriminator": [
                176,
                88,
                44,
                90,
                127,
                151,
                62,
                80
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "arxNodeAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                }
            ];
            "args": [
                {
                    "name": "nodeOffset";
                    "type": "u32";
                },
                {
                    "name": "meta";
                    "type": {
                        "defined": {
                            "name": "nodeMetadata";
                        };
                    };
                }
            ];
        },
        {
            "name": "setCluster";
            "discriminator": [
                140,
                96,
                38,
                83,
                225,
                128,
                25,
                176
            ];
            "accounts": [
                {
                    "name": "signer";
                    "docs": [
                        "Signer of the transaction."
                    ];
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "mxe";
                    "docs": [
                        "MXE account to set the cluster for."
                    ];
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    88,
                                    69,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "cluster";
                    "docs": [
                        "Cluster to set for the MXE."
                    ];
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "clusterOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "mxeProgram";
                },
                {
                    "name": "systemProgram";
                    "docs": [
                        "System program account."
                    ];
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "clusterOffset";
                    "type": "u32";
                }
            ];
        },
        {
            "name": "setClusterAuthority";
            "discriminator": [
                94,
                172,
                32,
                75,
                38,
                40,
                31,
                106
            ];
            "accounts": [
                {
                    "name": "currentAuthority";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "id";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "clusterId";
                    "type": "u32";
                },
                {
                    "name": "newAuthority";
                    "type": {
                        "option": "pubkey";
                    };
                }
            ];
        },
        {
            "name": "setMxeKeys";
            "discriminator": [
                156,
                205,
                125,
                215,
                134,
                88,
                62,
                144
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "node";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "mxe";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    77,
                                    88,
                                    69,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            }
                        ];
                    };
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "mxe.cluster.ok_or(ArciumError :: ClusterNotSet) ? ";
                                "account": "mxeAccount";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "nodeOffset";
                    "type": "u32";
                },
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                },
                {
                    "name": "mxeX25519Pubkey";
                    "type": {
                        "array": [
                            "u8",
                            32
                        ];
                    };
                }
            ];
        },
        {
            "name": "updateCurrentEpochIdempotent";
            "discriminator": [
                47,
                73,
                68,
                127,
                116,
                74,
                89,
                62
            ];
            "accounts": [
                {
                    "name": "clock";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    111,
                                    99,
                                    107,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            }
                        ];
                    };
                }
            ];
            "args": [];
        },
        {
            "name": "uploadCircuit";
            "discriminator": [
                86,
                238,
                214,
                111,
                30,
                23,
                168,
                100
            ];
            "accounts": [
                {
                    "name": "signer";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "compDefAcc";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    65,
                                    99,
                                    99,
                                    111,
                                    117,
                                    110,
                                    116
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "mxeProgram";
                            },
                            {
                                "kind": "arg";
                                "path": "compOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "compDefRaw";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    111,
                                    109,
                                    112,
                                    117,
                                    116,
                                    97,
                                    116,
                                    105,
                                    111,
                                    110,
                                    68,
                                    101,
                                    102,
                                    105,
                                    110,
                                    105,
                                    116,
                                    105,
                                    111,
                                    110,
                                    82,
                                    97,
                                    119
                                ];
                            },
                            {
                                "kind": "account";
                                "path": "compDefAcc";
                            },
                            {
                                "kind": "arg";
                                "path": "rawCircuitIndex";
                            }
                        ];
                    };
                },
                {
                    "name": "systemProgram";
                    "address": "11111111111111111111111111111111";
                }
            ];
            "args": [
                {
                    "name": "compOffset";
                    "type": "u32";
                },
                {
                    "name": "mxeProgram";
                    "type": "pubkey";
                },
                {
                    "name": "rawCircuitIndex";
                    "type": "u8";
                },
                {
                    "name": "uploadData";
                    "type": {
                        "array": [
                            "u8",
                            814
                        ];
                    };
                },
                {
                    "name": "offset";
                    "type": "u32";
                }
            ];
        },
        {
            "name": "voteFee";
            "discriminator": [
                39,
                118,
                79,
                185,
                118,
                12,
                71,
                84
            ];
            "accounts": [
                {
                    "name": "nodeAuthority";
                    "writable": true;
                    "signer": true;
                },
                {
                    "name": "clusterAcc";
                    "writable": true;
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    67,
                                    108,
                                    117,
                                    115,
                                    116,
                                    101,
                                    114
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "clusterOffset";
                            }
                        ];
                    };
                },
                {
                    "name": "arxNodeAcc";
                    "pda": {
                        "seeds": [
                            {
                                "kind": "const";
                                "value": [
                                    65,
                                    114,
                                    120,
                                    78,
                                    111,
                                    100,
                                    101
                                ];
                            },
                            {
                                "kind": "arg";
                                "path": "nodeOffset";
                            }
                        ];
                    };
                }
            ];
            "args": [
                {
                    "name": "clusterOffset";
                    "type": "u32";
                },
                {
                    "name": "nodeOffset";
                    "type": "u32";
                },
                {
                    "name": "feeVote";
                    "type": "u64";
                }
            ];
        }
    ];
    "accounts": [
        {
            "name": "arxNode";
            "discriminator": [
                2,
                207,
                122,
                223,
                93,
                97,
                231,
                199
            ];
        },
        {
            "name": "clockAccount";
            "discriminator": [
                152,
                171,
                158,
                195,
                75,
                61,
                51,
                8
            ];
        },
        {
            "name": "cluster";
            "discriminator": [
                236,
                225,
                118,
                228,
                173,
                106,
                18,
                60
            ];
        },
        {
            "name": "computationAccount";
            "discriminator": [
                136,
                34,
                167,
                71,
                41,
                174,
                103,
                77
            ];
        },
        {
            "name": "computationDefinitionAccount";
            "discriminator": [
                245,
                176,
                217,
                221,
                253,
                104,
                172,
                200
            ];
        },
        {
            "name": "computationDefinitionRaw";
            "discriminator": [
                226,
                70,
                57,
                224,
                38,
                233,
                59,
                136
            ];
        },
        {
            "name": "feePool";
            "discriminator": [
                172,
                38,
                77,
                146,
                148,
                5,
                51,
                242
            ];
        },
        {
            "name": "largeExecPool";
            "discriminator": [
                147,
                145,
                148,
                170,
                30,
                13,
                43,
                216
            ];
        },
        {
            "name": "largeMempool";
            "discriminator": [
                16,
                168,
                90,
                235,
                249,
                207,
                73,
                223
            ];
        },
        {
            "name": "mxeAccount";
            "discriminator": [
                103,
                26,
                85,
                250,
                179,
                159,
                17,
                117
            ];
        },
        {
            "name": "mediumExecPool";
            "discriminator": [
                97,
                117,
                128,
                202,
                213,
                76,
                5,
                163
            ];
        },
        {
            "name": "mediumMempool";
            "discriminator": [
                10,
                249,
                58,
                39,
                255,
                231,
                199,
                168
            ];
        },
        {
            "name": "operator";
            "discriminator": [
                219,
                31,
                188,
                145,
                69,
                139,
                204,
                117
            ];
        },
        {
            "name": "smallExecPool";
            "discriminator": [
                37,
                147,
                249,
                253,
                217,
                136,
                3,
                87
            ];
        },
        {
            "name": "smallMempool";
            "discriminator": [
                123,
                153,
                151,
                118,
                126,
                71,
                73,
                92
            ];
        },
        {
            "name": "tinyExecPool";
            "discriminator": [
                80,
                245,
                5,
                90,
                154,
                189,
                190,
                172
            ];
        },
        {
            "name": "tinyMempool";
            "discriminator": [
                176,
                33,
                67,
                108,
                73,
                135,
                110,
                166
            ];
        }
    ];
    "events": [
        {
            "name": "callbackComputationEvent";
            "discriminator": [
                155,
                213,
                238,
                159,
                240,
                76,
                167,
                19
            ];
        },
        {
            "name": "finalizeComputationEvent";
            "discriminator": [
                27,
                75,
                117,
                221,
                191,
                213,
                253,
                249
            ];
        },
        {
            "name": "initComputationEvent";
            "discriminator": [
                17,
                51,
                124,
                226,
                70,
                97,
                58,
                186
            ];
        },
        {
            "name": "queueComputationEvent";
            "discriminator": [
                118,
                53,
                33,
                169,
                32,
                14,
                197,
                147
            ];
        }
    ];
    "errors": [
        {
            "code": 6000;
            "name": "invalidAuthority";
            "msg": "The given authority is invalid";
        },
        {
            "code": 6001;
            "name": "mxeKeysAlreadySet";
            "msg": "The MXE keys are already set, i.e. all the nodes of the MXE cluster already agreed on the MXE keys";
        },
        {
            "code": 6002;
            "name": "mxeKeysNotSet";
            "msg": "The MXE keys are not set, i.e. not all the nodes of the MXE cluster agreed on the MXE keys";
        },
        {
            "code": 6003;
            "name": "invalidMxe";
            "msg": "An invalid MXE account has been supplied";
        },
        {
            "code": 6004;
            "name": "clusterAlreadySet";
            "msg": "The cluster is already set";
        },
        {
            "code": 6005;
            "name": "clusterNotSet";
            "msg": "The cluster is not set";
        },
        {
            "code": 6006;
            "name": "invalidCluster";
            "msg": "An invalid cluster account has been supplied";
        },
        {
            "code": 6007;
            "name": "invalidComputationDefinition";
            "msg": "An invalid computation definition account has been supplied";
        },
        {
            "code": 6008;
            "name": "cantFindMempoolId";
            "msg": "Couldn't find a mempool ID for the computation";
        },
        {
            "code": 6100;
            "name": "invalidMempoolDiscriminator";
            "msg": "Mempool discriminator is invalid";
        },
        {
            "code": 6101;
            "name": "invalidMempoolSize";
            "msg": "Mempool size is invalid";
        },
        {
            "code": 6102;
            "name": "invalidExecpoolDiscriminator";
            "msg": "Execpool discriminator is invalid";
        },
        {
            "code": 6103;
            "name": "maxParallelismReached";
            "msg": "Max parallelism reached";
        },
        {
            "code": 6200;
            "name": "invalidComputationOffset";
            "msg": "Computation offset is invalid";
        },
        {
            "code": 6201;
            "name": "invalidCallbackAccs";
            "msg": "Callback accounts are invalid";
        },
        {
            "code": 6202;
            "name": "invalidCallbackAccsLen";
            "msg": "Callback accounts length is invalid";
        },
        {
            "code": 6203;
            "name": "alreadyInitializedComputation";
            "msg": "The computation is already initialized";
        },
        {
            "code": 6204;
            "name": "alreadyCallbackedComputation";
            "msg": "Callback computation already called";
        },
        {
            "code": 6205;
            "name": "invalidFinalizeTx";
            "msg": "Finalize tx is invalid";
        },
        {
            "code": 6206;
            "name": "invalidComputationStatus";
            "msg": "Computation status is invalid";
        },
        {
            "code": 6207;
            "name": "invalidComputation";
            "msg": "Computation is invalid";
        },
        {
            "code": 6208;
            "name": "invalidComputationAuthority";
            "msg": "Computation authority is invalid";
        },
        {
            "code": 6209;
            "name": "invalidCallbackInstructions";
            "msg": "Callback instructions are invalid";
        },
        {
            "code": 6300;
            "name": "computationDefinitionNotCompleted";
            "msg": "Computation definition is not completed";
        },
        {
            "code": 6301;
            "name": "invalidArguments";
            "msg": "Arguments supplied are invalid";
        },
        {
            "code": 6302;
            "name": "invalidCircuitSource";
            "msg": "Circuit source is invalid";
        },
        {
            "code": 6303;
            "name": "computationDefinitionAlreadyCompleted";
            "msg": "Computation definition already completed";
        },
        {
            "code": 6400;
            "name": "invalidNode";
            "msg": "Node is invalid";
        },
        {
            "code": 6401;
            "name": "maxClusterMembershipReached";
            "msg": "Maximum number of nodes in the cluster has been reached";
        },
        {
            "code": 6402;
            "name": "nodeAlreadyExists";
            "msg": "The node already exists in the cluster";
        },
        {
            "code": 6403;
            "name": "invalidNodeAuthority";
            "msg": "Node authority is invalid";
        },
        {
            "code": 6404;
            "name": "nodeNotInactive";
            "msg": "Node is not inactive";
        },
        {
            "code": 6405;
            "name": "nodeNotActive";
            "msg": "Node is not active";
        },
        {
            "code": 6406;
            "name": "invalidClusterMembership";
            "msg": "Cluster membership is invalid";
        },
        {
            "code": 6407;
            "name": "nodeInActiveCluster";
            "msg": "Node is in an active cluster";
        },
        {
            "code": 6408;
            "name": "invalidNodeConfig";
            "msg": "Node config is invalid";
        },
        {
            "code": 6500;
            "name": "clusterFull";
            "msg": "Cluster is full";
        },
        {
            "code": 6501;
            "name": "invalidDeactivationEpoch";
            "msg": "Cluster deactivation epoch is invalid";
        },
        {
            "code": 6502;
            "name": "invalidMaxSize";
            "msg": "Cluster maximum size is invalid";
        },
        {
            "code": 6503;
            "name": "invalidClusterAuthority";
            "msg": "Cluster authority is invalid";
        },
        {
            "code": 6504;
            "name": "invalidFeeProposal";
            "msg": "Cluster fee proposal is invalid";
        },
        {
            "code": 6505;
            "name": "invalidClusterState";
            "msg": "Cluster state is invalid";
        },
        {
            "code": 6506;
            "name": "invalidVote";
            "msg": "Cluster vote is invalid";
        },
        {
            "code": 6600;
            "name": "serializationFailed";
            "msg": "Borsh serialization failed";
        },
        {
            "code": 6601;
            "name": "deserializationFailed";
            "msg": "Borsh deserialization failed";
        },
        {
            "code": 6602;
            "name": "heapFull";
            "msg": "Heap is full";
        },
        {
            "code": 6603;
            "name": "invalidSlot";
            "msg": "Current slot is before the last updated slot";
        },
        {
            "code": 6604;
            "name": "epochIsInfinity";
            "msg": "Epoch is infinity";
        },
        {
            "code": 6605;
            "name": "invalidTimestamp";
            "msg": "Timestamp is invalid";
        },
        {
            "code": 6606;
            "name": "invalidEpoch";
            "msg": "Epoch is invalid";
        },
        {
            "code": 6607;
            "name": "epochOverflow";
            "msg": "Epoch overflowed";
        }
    ];
    "types": [
        {
            "name": "abortReason";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "invalidMac";
                    },
                    {
                        "name": "expectedSentShare";
                    },
                    {
                        "name": "expectedFieldElement";
                    },
                    {
                        "name": "expectedAbort";
                    },
                    {
                        "name": "malformedData";
                    },
                    {
                        "name": "computationFailed";
                    },
                    {
                        "name": "internalError";
                    },
                    {
                        "name": "preprocessingStreamError";
                    },
                    {
                        "name": "divisionByZero";
                    },
                    {
                        "name": "noSignature";
                    },
                    {
                        "name": "invalidSignature";
                    },
                    {
                        "name": "primitiveError";
                    },
                    {
                        "name": "quadraticNonResidue";
                    }
                ];
            };
        },
        {
            "name": "acccountAccessInfo";
            "serialization": "bytemuck";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "inner";
                        "type": "u16";
                    }
                ];
            };
        },
        {
            "name": "activation";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "activationEpoch";
                        "docs": [
                            "epoch for the cluster was activated. Epoch::INFINITY if inactive."
                        ];
                        "type": {
                            "defined": {
                                "name": "epoch";
                            };
                        };
                    },
                    {
                        "name": "deactivationEpoch";
                        "docs": [
                            "epoch for the cluster to be deactivated. Epoch::INFINITY if none."
                        ];
                        "type": {
                            "defined": {
                                "name": "epoch";
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "argument";
            "docs": [
                "An argument passed into a [Computation], corresponding to [super::mxe::Parameter] of the",
                "[super::mxe::ComputationSignature]. An argument that corresponds to a Parameter type."
            ];
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "plaintextBool";
                        "fields": [
                            "bool"
                        ];
                    },
                    {
                        "name": "plaintextU8";
                        "fields": [
                            "u8"
                        ];
                    },
                    {
                        "name": "plaintextU16";
                        "fields": [
                            "u16"
                        ];
                    },
                    {
                        "name": "plaintextU32";
                        "fields": [
                            "u32"
                        ];
                    },
                    {
                        "name": "plaintextU64";
                        "fields": [
                            "u64"
                        ];
                    },
                    {
                        "name": "plaintextU128";
                        "fields": [
                            "u128"
                        ];
                    },
                    {
                        "name": "plaintextFloat";
                        "fields": [
                            "f64"
                        ];
                    },
                    {
                        "name": "encryptedBool";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            }
                        ];
                    },
                    {
                        "name": "encryptedU8";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            }
                        ];
                    },
                    {
                        "name": "encryptedU16";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            }
                        ];
                    },
                    {
                        "name": "encryptedU32";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            }
                        ];
                    },
                    {
                        "name": "encryptedU64";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            }
                        ];
                    },
                    {
                        "name": "encryptedU128";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            }
                        ];
                    },
                    {
                        "name": "encryptedFloat";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            }
                        ];
                    },
                    {
                        "name": "arcisPubkey";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            }
                        ];
                    },
                    {
                        "name": "arcisSignature";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    64
                                ];
                            }
                        ];
                    },
                    {
                        "name": "account";
                        "fields": [
                            "pubkey",
                            "u32",
                            "u32"
                        ];
                    },
                    {
                        "name": "manticoreAlgo";
                        "fields": [
                            "string"
                        ];
                    },
                    {
                        "name": "inputDataset";
                        "fields": [
                            "string"
                        ];
                    }
                ];
            };
        },
        {
            "name": "arxNode";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "primaryStakingAccount";
                        "type": "pubkey";
                    },
                    {
                        "name": "metadata";
                        "type": {
                            "defined": {
                                "name": "nodeMetadata";
                            };
                        };
                    },
                    {
                        "name": "config";
                        "type": {
                            "defined": {
                                "name": "arxNodeConfig";
                            };
                        };
                    },
                    {
                        "name": "clusterMemberships";
                        "docs": [
                            "The offsets of the cluster the node is a member of."
                        ];
                        "type": {
                            "vec": "u32";
                        };
                    },
                    {
                        "name": "proposedClusterMemberships";
                        "docs": [
                            "The offsets of the clusters the node has been proposed to be a member of."
                        ];
                        "type": {
                            "vec": "u32";
                        };
                    },
                    {
                        "name": "cuCapacityClaim";
                        "type": "u64";
                    },
                    {
                        "name": "isActive";
                        "type": "bool";
                    },
                    {
                        "name": "reserved";
                        "type": {
                            "array": [
                                "u8",
                                32
                            ];
                        };
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "arxNodeConfig";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "maxClusterMemberships";
                        "type": "u32";
                    },
                    {
                        "name": "authority";
                        "docs": [
                            "Admin key for node management operations"
                        ];
                        "type": "pubkey";
                    },
                    {
                        "name": "callbackAuthority";
                        "docs": [
                            "Key used to sign computation callbacks - separated for operational security"
                        ];
                        "type": "pubkey";
                    }
                ];
            };
        },
        {
            "name": "callbackAccount";
            "docs": [
                "A callback account to be provided to a computation.",
                "We don't specify signer, since node operators can't sign."
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "pubkey";
                        "type": "pubkey";
                    },
                    {
                        "name": "isWritable";
                        "type": "bool";
                    }
                ];
            };
        },
        {
            "name": "callbackComputationEvent";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "computationOffset";
                        "type": "u64";
                    },
                    {
                        "name": "mxeProgramId";
                        "type": "pubkey";
                    }
                ];
            };
        },
        {
            "name": "callbackInstruction";
            "docs": [
                "A custom callback instruction with its own program ID and discriminator."
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "programId";
                        "type": "pubkey";
                    },
                    {
                        "name": "discriminator";
                        "type": "bytes";
                    },
                    {
                        "name": "accounts";
                        "type": {
                            "vec": {
                                "defined": {
                                    "name": "callbackAccount";
                                };
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "circuitSource";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "local";
                        "fields": [
                            {
                                "defined": {
                                    "name": "localCircuitSource";
                                };
                            }
                        ];
                    },
                    {
                        "name": "onChain";
                        "fields": [
                            {
                                "defined": {
                                    "name": "onChainCircuitSource";
                                };
                            }
                        ];
                    },
                    {
                        "name": "offChain";
                        "fields": [
                            {
                                "defined": {
                                    "name": "offChainCircuitSource";
                                };
                            }
                        ];
                    }
                ];
            };
        },
        {
            "name": "clockAccount";
            "docs": [
                "An account storing the current network epoch"
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "startEpoch";
                        "type": {
                            "defined": {
                                "name": "epoch";
                            };
                        };
                    },
                    {
                        "name": "currentEpoch";
                        "type": {
                            "defined": {
                                "name": "epoch";
                            };
                        };
                    },
                    {
                        "name": "startEpochTimestamp";
                        "type": {
                            "defined": {
                                "name": "timestamp";
                            };
                        };
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "cluster";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "authority";
                        "type": {
                            "option": "pubkey";
                        };
                    },
                    {
                        "name": "maxSize";
                        "type": "u32";
                    },
                    {
                        "name": "activation";
                        "type": {
                            "defined": {
                                "name": "activation";
                            };
                        };
                    },
                    {
                        "name": "maxCapacity";
                        "type": "u64";
                    },
                    {
                        "name": "cuPrice";
                        "docs": [
                            "The price of compute units in this cluster."
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "cuPriceProposals";
                        "docs": [
                            "The proposals for the cu price proposals in the next epoch.",
                            "Index 0 is always the current price, we allow `MAX_FEE_PROPS` at most."
                        ];
                        "type": {
                            "array": [
                                "u64",
                                32
                            ];
                        };
                    },
                    {
                        "name": "lastUpdatedEpoch";
                        "docs": [
                            "The epoch this cluster was last updated.",
                            "Used to determine if the cluster needs to be updated."
                        ];
                        "type": {
                            "defined": {
                                "name": "epoch";
                            };
                        };
                    },
                    {
                        "name": "mxes";
                        "docs": [
                            "The MXE's that this cluster is assigned to. Referred to by the MXE's program id."
                        ];
                        "type": {
                            "vec": "pubkey";
                        };
                    },
                    {
                        "name": "nodes";
                        "type": {
                            "vec": {
                                "defined": {
                                    "name": "nodeRef";
                                };
                            };
                        };
                    },
                    {
                        "name": "pendingNodes";
                        "type": {
                            "vec": {
                                "defined": {
                                    "name": "nodeRef";
                                };
                            };
                        };
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "computationAccount";
            "docs": [
                "A computation execution call to a [super::mxe::ComputationDefinitionAccount]."
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "payer";
                        "type": "pubkey";
                    },
                    {
                        "name": "clusterIndex";
                        "docs": [
                            "The MXE's cluster to be used for execution.",
                            "",
                            "# Notes",
                            "",
                            "- [None] represents the default cluster,",
                            "- [Some] specifies the index of the fallback cluster."
                        ];
                        "type": {
                            "option": "u16";
                        };
                    },
                    {
                        "name": "computationDefinitionOffset";
                        "docs": [
                            "The offset of the corresponding [super::mxe::ComputationDefinitionAccount]."
                        ];
                        "type": "u32";
                    },
                    {
                        "name": "executionFee";
                        "docs": [
                            "The execution fee for the execution."
                        ];
                        "type": {
                            "defined": {
                                "name": "executionFee";
                            };
                        };
                    },
                    {
                        "name": "slot";
                        "type": "u64";
                    },
                    {
                        "name": "slotCounter";
                        "type": "u16";
                    },
                    {
                        "name": "status";
                        "type": {
                            "defined": {
                                "name": "computationStatus";
                            };
                        };
                    },
                    {
                        "name": "arguments";
                        "docs": [
                            "The arguments passed to the computation. If it is a manticore computation, we expect the",
                            "first element to be of type ManticoreAlgo"
                        ];
                        "type": {
                            "vec": {
                                "defined": {
                                    "name": "argument";
                                };
                            };
                        };
                    },
                    {
                        "name": "callbackUrl";
                        "type": {
                            "option": "string";
                        };
                    },
                    {
                        "name": "customCallbackInstructions";
                        "type": {
                            "vec": {
                                "defined": {
                                    "name": "callbackInstruction";
                                };
                            };
                        };
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "computationDefinitionAccount";
            "docs": [
                "An account representing a [ComputationDefinition] in a MXE."
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "finalizationAuthority";
                        "docs": [
                            "The authority that is allowed to finalize the computation. If set to None, anyone can."
                        ];
                        "type": {
                            "option": "pubkey";
                        };
                    },
                    {
                        "name": "finalizeDuringCallback";
                        "docs": [
                            "Whether to we need a separate callback and finalize instruction or if we can do it in one."
                        ];
                        "type": "bool";
                    },
                    {
                        "name": "cuAmount";
                        "docs": [
                            "The amount of CUs this computation will use."
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "definition";
                        "docs": [
                            "The interface of the computation to execute."
                        ];
                        "type": {
                            "defined": {
                                "name": "computationDefinitionMeta";
                            };
                        };
                    },
                    {
                        "name": "circuitSource";
                        "docs": [
                            "Where to fetch the actual raw circuit to execute."
                        ];
                        "type": {
                            "defined": {
                                "name": "circuitSource";
                            };
                        };
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "computationDefinitionMeta";
            "docs": [
                "A computation definition for execution in a MXE."
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "circuitLen";
                        "type": "u32";
                    },
                    {
                        "name": "signature";
                        "type": {
                            "defined": {
                                "name": "computationSignature";
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "computationDefinitionRaw";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "bump";
                        "type": "u8";
                    },
                    {
                        "name": "compiledCircuit";
                        "docs": [
                            "The length here is meaningless."
                        ];
                        "type": {
                            "array": [
                                "u8",
                                0
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "computationReference";
            "serialization": "bytemuck";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "computationOffset";
                        "type": "u64";
                    },
                    {
                        "name": "priorityFee";
                        "type": "u64";
                    },
                    {
                        "name": "computationDefinitionOffset";
                        "type": "u32";
                    },
                    {
                        "name": "accs";
                        "type": {
                            "array": [
                                {
                                    "defined": {
                                        "name": "acccountAccessInfo";
                                    };
                                },
                                10
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "computationSignature";
            "docs": [
                "The signature of a computation defined in a [ComputationDefinition]."
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "parameters";
                        "docs": [
                            "The input parameters of the computation."
                        ];
                        "type": {
                            "vec": {
                                "defined": {
                                    "name": "parameter";
                                };
                            };
                        };
                    },
                    {
                        "name": "outputs";
                        "docs": [
                            "The output(s) of the computation."
                        ];
                        "type": {
                            "vec": {
                                "defined": {
                                    "name": "output";
                                };
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "computationStatus";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "queued";
                    },
                    {
                        "name": "executed";
                    },
                    {
                        "name": "finalized";
                    }
                ];
            };
        },
        {
            "name": "epoch";
            "docs": [
                "The network epoch"
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    "u64"
                ];
            };
        },
        {
            "name": "executingPool";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "generics": [
                {
                    "kind": "const";
                    "name": "maxParrallelComputations";
                    "type": "usize";
                }
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "bump";
                        "type": "u8";
                    },
                    {
                        "name": "compStatus";
                        "type": {
                            "array": [
                                "u8",
                                13
                            ];
                        };
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                2
                            ];
                        };
                    },
                    {
                        "name": "counter";
                        "type": "u64";
                    },
                    {
                        "name": "execpoolIndex";
                        "type": {
                            "array": [
                                "u64",
                                {
                                    "generic": "maxParrallelComputations";
                                }
                            ];
                        };
                    },
                    {
                        "name": "currentlyExecuting";
                        "type": {
                            "array": [
                                {
                                    "defined": {
                                        "name": "computationReference";
                                    };
                                },
                                {
                                    "generic": "maxParrallelComputations";
                                }
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "executionFailure";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "serialization";
                    },
                    {
                        "name": "router";
                    },
                    {
                        "name": "circuit";
                    },
                    {
                        "name": "inputs";
                    },
                    {
                        "name": "protocolInit";
                    },
                    {
                        "name": "protocolRun";
                    },
                    {
                        "name": "abort";
                        "fields": [
                            {
                                "defined": {
                                    "name": "abortReason";
                                };
                            }
                        ];
                    }
                ];
            };
        },
        {
            "name": "executionFee";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "baseFee";
                        "docs": [
                            "The base fee for the computation."
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "priorityFee";
                        "docs": [
                            "The additional fee to enforce priortized execution in the mempool."
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "inputDeliveryFee";
                        "docs": [
                            "A fee for data relaying used with [super::mxe::DataProvisioning::Protected] data",
                            "provisioning."
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "outputDeliveryFee";
                        "docs": [
                            "A fee for relayer based (unverifiable) off-chain output delivery."
                        ];
                        "type": "u64";
                    }
                ];
            };
        },
        {
            "name": "executionStatus";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "success";
                    },
                    {
                        "name": "failure";
                        "fields": [
                            {
                                "defined": {
                                    "name": "executionFailure";
                                };
                            },
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            }
                        ];
                    }
                ];
            };
        },
        {
            "name": "feePool";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "finalizeComputationEvent";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "computationOffset";
                        "type": "u64";
                    },
                    {
                        "name": "mxeProgramId";
                        "type": "pubkey";
                    }
                ];
            };
        },
        {
            "name": "initComputationEvent";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "computationOffset";
                        "type": "u64";
                    },
                    {
                        "name": "mxeProgramId";
                        "type": "pubkey";
                    }
                ];
            };
        },
        {
            "name": "largeExecPool";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "transparent";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "inner";
                        "type": {
                            "defined": {
                                "name": "executingPool";
                                "generics": [
                                    {
                                        "kind": "const";
                                        "value": "100";
                                    }
                                ];
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "largeMempool";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "transparent";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "inner";
                        "type": {
                            "defined": {
                                "name": "largeMempoolInner";
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "largeMempoolInner";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "lastUpdatedSlot";
                        "type": "u64";
                    },
                    {
                        "name": "slotCounter";
                        "type": "u16";
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                5
                            ];
                        };
                    },
                    {
                        "name": "computations";
                        "type": {
                            "defined": {
                                "name": "largeMempoolInnerBuffer";
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "largeMempoolInnerBuffer";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "elems";
                        "type": {
                            "array": [
                                {
                                    "defined": {
                                        "name": "largeMempoolInnerBufferHeap";
                                    };
                                },
                                180
                            ];
                        };
                    },
                    {
                        "name": "validBits";
                        "docs": [
                            "Bit array tracking which slots are valid (1 = valid, 0 = stale)",
                            "1 bit per slot, packed into bytes. For $buffer_length=180, this is 23 bytes."
                        ];
                        "type": {
                            "array": [
                                "u8",
                                23
                            ];
                        };
                    },
                    {
                        "name": "startIndex";
                        "type": "u8";
                    },
                    {
                        "name": "length";
                        "type": "u8";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                7
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "largeMempoolInnerBufferHeap";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "entries";
                        "type": {
                            "array": [
                                {
                                    "defined": {
                                        "name": "computationReference";
                                    };
                                },
                                100
                            ];
                        };
                    },
                    {
                        "name": "count";
                        "type": "u16";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                6
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "localCircuitSource";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "mxeKeygen";
                    }
                ];
            };
        },
        {
            "name": "mxeAccount";
            "docs": [
                "A MPC Execution Environment."
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "authority";
                        "docs": [
                            "The management authority of the MXE."
                        ];
                        "type": {
                            "option": "pubkey";
                        };
                    },
                    {
                        "name": "cluster";
                        "docs": [
                            "The cluster executing the MXE."
                        ];
                        "type": {
                            "option": "u32";
                        };
                    },
                    {
                        "name": "x25519Pubkey";
                        "docs": [
                            "The x25519 pubkey (256 bits curve25519), used for encrypted data."
                        ];
                        "type": {
                            "defined": {
                                "name": "x25519Pubkey";
                            };
                        };
                    },
                    {
                        "name": "fallbackClusters";
                        "docs": [
                            "Fallback clusters that can execute this MXE as an alternative to the",
                            "[MXEAccount::cluster]. There can be a maximum of [MAX_FALLBACK_CLUSTERS]",
                            "fallback clusters."
                        ];
                        "type": {
                            "vec": "u32";
                        };
                    },
                    {
                        "name": "rejectedClusters";
                        "docs": [
                            "The clusters that have rejected this MXE."
                        ];
                        "type": {
                            "vec": "u32";
                        };
                    },
                    {
                        "name": "computationDefinitions";
                        "docs": [
                            "The offsets of all [ComputationDefinitionAccount]s of this MXE."
                        ];
                        "type": {
                            "vec": "u32";
                        };
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "mediumExecPool";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "transparent";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "inner";
                        "type": {
                            "defined": {
                                "name": "executingPool";
                                "generics": [
                                    {
                                        "kind": "const";
                                        "value": "10";
                                    }
                                ];
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "mediumMempool";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "transparent";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "inner";
                        "type": {
                            "defined": {
                                "name": "mediumMempoolInner";
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "mediumMempoolInner";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "lastUpdatedSlot";
                        "type": "u64";
                    },
                    {
                        "name": "slotCounter";
                        "type": "u16";
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                5
                            ];
                        };
                    },
                    {
                        "name": "computations";
                        "type": {
                            "defined": {
                                "name": "mediumMempoolInnerBuffer";
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "mediumMempoolInnerBuffer";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "elems";
                        "type": {
                            "array": [
                                {
                                    "defined": {
                                        "name": "mediumMempoolInnerBufferHeap";
                                    };
                                },
                                180
                            ];
                        };
                    },
                    {
                        "name": "validBits";
                        "docs": [
                            "Bit array tracking which slots are valid (1 = valid, 0 = stale)",
                            "1 bit per slot, packed into bytes. For $buffer_length=180, this is 23 bytes."
                        ];
                        "type": {
                            "array": [
                                "u8",
                                23
                            ];
                        };
                    },
                    {
                        "name": "startIndex";
                        "type": "u8";
                    },
                    {
                        "name": "length";
                        "type": "u8";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                7
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "mediumMempoolInnerBufferHeap";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "entries";
                        "type": {
                            "array": [
                                {
                                    "defined": {
                                        "name": "computationReference";
                                    };
                                },
                                10
                            ];
                        };
                    },
                    {
                        "name": "count";
                        "type": "u16";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                6
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "mempoolSize";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "tiny";
                    },
                    {
                        "name": "small";
                    },
                    {
                        "name": "medium";
                    },
                    {
                        "name": "large";
                    }
                ];
            };
        },
        {
            "name": "nodeMetadata";
            "docs": [
                "location as [ISO 3166-1 alpha-2](https://www.iso.org/iso-3166-country-codes.html) country code"
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "ip";
                        "docs": [
                            "[Ipv4Addr], represented by it's 4 octects"
                        ];
                        "type": {
                            "array": [
                                "u8",
                                4
                            ];
                        };
                    },
                    {
                        "name": "peerId";
                        "docs": [
                            "Needed for MPC protocol"
                        ];
                        "type": {
                            "array": [
                                "u8",
                                32
                            ];
                        };
                    },
                    {
                        "name": "location";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "nodeRef";
            "docs": [
                "A reference to a node in the cluster.",
                "The offset is to derive the Node Account.",
                "The current_total_rewards is the total rewards the node has received so far in the current",
                "epoch."
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "offset";
                        "type": "u32";
                    },
                    {
                        "name": "currentTotalRewards";
                        "docs": [
                            "Current total rewards the node has received in the current epoch in lamports."
                        ];
                        "type": "u64";
                    },
                    {
                        "name": "vote";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "offChainCircuitSource";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "source";
                        "type": "string";
                    },
                    {
                        "name": "hash";
                        "type": {
                            "array": [
                                "u8",
                                32
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "onChainCircuitSource";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "isCompleted";
                        "docs": [
                            "Specifies if the circuit for this computation has been fully uploaded,",
                            "as this can take multiple transactions due to the circuit size."
                        ];
                        "type": "bool";
                    },
                    {
                        "name": "uploadAuth";
                        "docs": [
                            "The authority that is allowed to upload the circuit."
                        ];
                        "type": "pubkey";
                    }
                ];
            };
        },
        {
            "name": "operator";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "nodeOffsets";
                        "type": {
                            "vec": "u32";
                        };
                    },
                    {
                        "name": "meta";
                        "type": {
                            "defined": {
                                "name": "operatorMeta";
                            };
                        };
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "operatorMeta";
            "docs": [
                "location as [ISO 3166-1 alpha-2](https://www.iso.org/iso-3166-country-codes.html) country code"
            ];
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "url";
                        "docs": [
                            "URL should point to a JSON containing the following fields:",
                            "- `name`: String, the name of the operator",
                            "- `description`: String, a description of the operator",
                            "- `icon`: String, a URL to an icon representing the operator",
                            "- `url`: String, a URL to the operator's website"
                        ];
                        "type": "string";
                    },
                    {
                        "name": "location";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "output";
            "docs": [
                "An output of a computation.",
                "We currently don't support encrypted outputs yet since encrypted values are passed via",
                "data objects."
            ];
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "plaintextBool";
                    },
                    {
                        "name": "plaintextU8";
                    },
                    {
                        "name": "plaintextU16";
                    },
                    {
                        "name": "plaintextU32";
                    },
                    {
                        "name": "plaintextU64";
                    },
                    {
                        "name": "plaintextU128";
                    },
                    {
                        "name": "ciphertext";
                    },
                    {
                        "name": "arcisPubkey";
                    },
                    {
                        "name": "plaintextFloat";
                    }
                ];
            };
        },
        {
            "name": "parameter";
            "docs": [
                "A parameter of a computation.",
                "We differentiate between plaintext and encrypted parameters and data objects.",
                "Plaintext parameters are directly provided as their value.",
                "Encrypted parameters are provided as an offchain reference to the data.",
                "Data objects are provided as a reference to the data object account."
            ];
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "plaintextBool";
                    },
                    {
                        "name": "plaintextU8";
                    },
                    {
                        "name": "plaintextU16";
                    },
                    {
                        "name": "plaintextU32";
                    },
                    {
                        "name": "plaintextU64";
                    },
                    {
                        "name": "plaintextU128";
                    },
                    {
                        "name": "ciphertext";
                    },
                    {
                        "name": "arcisPubkey";
                    },
                    {
                        "name": "arcisSignature";
                    },
                    {
                        "name": "plaintextFloat";
                    },
                    {
                        "name": "manticoreAlgo";
                    },
                    {
                        "name": "inputDataset";
                    }
                ];
            };
        },
        {
            "name": "queueComputationEvent";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "computationOffset";
                        "type": "u64";
                    },
                    {
                        "name": "mxeProgramId";
                        "type": "pubkey";
                    }
                ];
            };
        },
        {
            "name": "smallExecPool";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "transparent";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "inner";
                        "type": {
                            "defined": {
                                "name": "executingPool";
                                "generics": [
                                    {
                                        "kind": "const";
                                        "value": "3";
                                    }
                                ];
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "smallMempool";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "transparent";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "inner";
                        "type": {
                            "defined": {
                                "name": "smallMempoolInner";
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "smallMempoolInner";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "lastUpdatedSlot";
                        "type": "u64";
                    },
                    {
                        "name": "slotCounter";
                        "type": "u16";
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                5
                            ];
                        };
                    },
                    {
                        "name": "computations";
                        "type": {
                            "defined": {
                                "name": "smallMempoolInnerBuffer";
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "smallMempoolInnerBuffer";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "elems";
                        "type": {
                            "array": [
                                {
                                    "defined": {
                                        "name": "smallMempoolInnerBufferHeap";
                                    };
                                },
                                180
                            ];
                        };
                    },
                    {
                        "name": "validBits";
                        "docs": [
                            "Bit array tracking which slots are valid (1 = valid, 0 = stale)",
                            "1 bit per slot, packed into bytes. For $buffer_length=180, this is 23 bytes."
                        ];
                        "type": {
                            "array": [
                                "u8",
                                23
                            ];
                        };
                    },
                    {
                        "name": "startIndex";
                        "type": "u8";
                    },
                    {
                        "name": "length";
                        "type": "u8";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                7
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "smallMempoolInnerBufferHeap";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "entries";
                        "type": {
                            "array": [
                                {
                                    "defined": {
                                        "name": "computationReference";
                                    };
                                },
                                3
                            ];
                        };
                    },
                    {
                        "name": "count";
                        "type": "u16";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                6
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "timestamp";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "timestamp";
                        "type": "u64";
                    }
                ];
            };
        },
        {
            "name": "tinyExecPool";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "transparent";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "inner";
                        "type": {
                            "defined": {
                                "name": "executingPool";
                                "generics": [
                                    {
                                        "kind": "const";
                                        "value": "1";
                                    }
                                ];
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "tinyMempool";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "transparent";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "inner";
                        "type": {
                            "defined": {
                                "name": "tinyMempoolInner";
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "tinyMempoolInner";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "lastUpdatedSlot";
                        "type": "u64";
                    },
                    {
                        "name": "slotCounter";
                        "type": "u16";
                    },
                    {
                        "name": "bump";
                        "type": "u8";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                5
                            ];
                        };
                    },
                    {
                        "name": "computations";
                        "type": {
                            "defined": {
                                "name": "tinyMempoolInnerBuffer";
                            };
                        };
                    }
                ];
            };
        },
        {
            "name": "tinyMempoolInnerBuffer";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "elems";
                        "type": {
                            "array": [
                                {
                                    "defined": {
                                        "name": "tinyMempoolInnerBufferHeap";
                                    };
                                },
                                180
                            ];
                        };
                    },
                    {
                        "name": "validBits";
                        "docs": [
                            "Bit array tracking which slots are valid (1 = valid, 0 = stale)",
                            "1 bit per slot, packed into bytes. For $buffer_length=180, this is 23 bytes."
                        ];
                        "type": {
                            "array": [
                                "u8",
                                23
                            ];
                        };
                    },
                    {
                        "name": "startIndex";
                        "type": "u8";
                    },
                    {
                        "name": "length";
                        "type": "u8";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                7
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "tinyMempoolInnerBufferHeap";
            "serialization": "bytemuckunsafe";
            "repr": {
                "kind": "c";
            };
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "entries";
                        "type": {
                            "array": [
                                {
                                    "defined": {
                                        "name": "computationReference";
                                    };
                                },
                                1
                            ];
                        };
                    },
                    {
                        "name": "count";
                        "type": "u16";
                    },
                    {
                        "name": "padding";
                        "type": {
                            "array": [
                                "u8",
                                6
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "x25519Pubkey";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "set";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            }
                        ];
                    },
                    {
                        "name": "unset";
                        "fields": [
                            {
                                "array": [
                                    "u8",
                                    32
                                ];
                            },
                            {
                                "vec": "bool";
                            }
                        ];
                    }
                ];
            };
        }
    ];
};

declare let address: string;
declare namespace metadata {
    let name: string;
    let version: string;
    let spec: string;
    let description: string;
}
declare let instructions: ({
    name: string;
    discriminator: number[];
    accounts: ({
        name: string;
        writable: boolean;
        signer: boolean;
        pda?: undefined;
        address?: undefined;
    } | {
        name: string;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        writable?: undefined;
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
                account?: undefined;
            } | {
                kind: string;
                path: string;
                account: string;
                value?: undefined;
            })[];
        };
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        address: string;
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
    })[];
    args: ({
        name: string;
        type: string;
    } | {
        name: string;
        type: {
            defined: {
                name: string;
            };
        };
    })[];
    docs?: undefined;
} | {
    name: string;
    discriminator: number[];
    accounts: ({
        name: string;
        writable: boolean;
        signer: boolean;
        pda?: undefined;
        optional?: undefined;
    } | {
        name: string;
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        signer?: undefined;
        optional?: undefined;
    } | {
        name: string;
        pda: {
            seeds: {
                kind: string;
                value: number[];
            }[];
        };
        writable?: undefined;
        signer?: undefined;
        optional?: undefined;
    } | {
        name: string;
        optional: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
                account?: undefined;
            } | {
                kind: string;
                path: string;
                account: string;
                value?: undefined;
            })[];
        };
        writable?: undefined;
        signer?: undefined;
    })[];
    args: {
        name: string;
        type: string;
    }[];
    docs?: undefined;
} | {
    name: string;
    docs: string[];
    discriminator: number[];
    accounts: {
        name: string;
    }[];
    args: never[];
} | {
    name: string;
    discriminator: number[];
    accounts: ({
        name: string;
        writable: boolean;
        signer: boolean;
        pda?: undefined;
        address?: undefined;
    } | {
        name: string;
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
        address?: undefined;
    } | {
        name: string;
        pda: {
            seeds: {
                kind: string;
                value: number[];
            }[];
        };
        writable?: undefined;
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        address: string;
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
    })[];
    args: {
        name: string;
        type: string;
    }[];
    docs?: undefined;
} | {
    name: string;
    docs: string[];
    discriminator: number[];
    accounts: ({
        name: string;
        docs: string[];
        writable: boolean;
        signer: boolean;
        pda?: undefined;
        address?: undefined;
    } | {
        name: string;
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        docs?: undefined;
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        docs: string[];
        address: string;
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
    })[];
    args: ({
        name: string;
        type: string;
    } | {
        name: string;
        type: {
            defined: {
                name: string;
            };
            option?: undefined;
        };
    } | {
        name: string;
        type: {
            option: {
                defined: {
                    name: string;
                };
            };
            defined?: undefined;
        };
    } | {
        name: string;
        type: {
            option: string;
            defined?: undefined;
        };
    })[];
} | {
    name: string;
    docs: string[];
    discriminator: number[];
    accounts: ({
        name: string;
        docs: string[];
        writable: boolean;
        signer: boolean;
        pda?: undefined;
        optional?: undefined;
        address?: undefined;
    } | {
        name: string;
        docs: string[];
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        signer?: undefined;
        optional?: undefined;
        address?: undefined;
    } | {
        name: string;
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        docs?: undefined;
        signer?: undefined;
        optional?: undefined;
        address?: undefined;
    } | {
        name: string;
        optional: boolean;
        docs?: undefined;
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
        address?: undefined;
    } | {
        name: string;
        docs: string[];
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
        optional?: undefined;
        address?: undefined;
    } | {
        name: string;
        docs: string[];
        address: string;
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
        optional?: undefined;
    })[];
    args: ({
        name: string;
        type: string;
    } | {
        name: string;
        type: {
            defined: {
                name: string;
            };
        };
    })[];
} | {
    name: string;
    docs: string[];
    discriminator: number[];
    accounts: ({
        name: string;
        writable: boolean;
        signer: boolean;
        docs?: undefined;
        pda?: undefined;
        address?: undefined;
    } | {
        name: string;
        docs: string[];
        signer: boolean;
        pda: {
            seeds: {
                kind: string;
                value: number[];
            }[];
            program: {
                kind: string;
                path: string;
            };
        };
        writable?: undefined;
        address?: undefined;
    } | {
        name: string;
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
            program?: undefined;
        };
        signer?: undefined;
        docs?: undefined;
        address?: undefined;
    } | {
        name: string;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
            program?: undefined;
        };
        writable?: undefined;
        signer?: undefined;
        docs?: undefined;
        address?: undefined;
    } | {
        name: string;
        address: string;
        writable?: undefined;
        signer?: undefined;
        docs?: undefined;
        pda?: undefined;
    })[];
    args: ({
        name: string;
        type: string;
    } | {
        name: string;
        type: {
            option: string;
            vec?: undefined;
        };
    } | {
        name: string;
        type: {
            vec: {
                defined: {
                    name: string;
                };
            };
            option?: undefined;
        };
    })[];
} | {
    name: string;
    discriminator: number[];
    accounts: ({
        name: string;
        docs: string[];
        writable: boolean;
        signer: boolean;
        pda?: undefined;
        address?: undefined;
    } | {
        name: string;
        docs: string[];
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        docs?: undefined;
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
        address?: undefined;
    } | {
        name: string;
        docs: string[];
        address: string;
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
    })[];
    args: {
        name: string;
        type: string;
    }[];
    docs?: undefined;
} | {
    name: string;
    discriminator: number[];
    accounts: ({
        name: string;
        writable: boolean;
        signer: boolean;
        pda?: undefined;
        address?: undefined;
    } | {
        name: string;
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        address: string;
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
    })[];
    args: ({
        name: string;
        type: string;
    } | {
        name: string;
        type: {
            option: string;
        };
    })[];
    docs?: undefined;
} | {
    name: string;
    discriminator: number[];
    accounts: ({
        name: string;
        writable: boolean;
        signer: boolean;
        pda?: undefined;
        address?: undefined;
    } | {
        name: string;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        writable?: undefined;
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
            } | {
                kind: string;
                path: string;
                value?: undefined;
            })[];
        };
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        writable: boolean;
        pda: {
            seeds: ({
                kind: string;
                value: number[];
                path?: undefined;
                account?: undefined;
            } | {
                kind: string;
                path: string;
                account: string;
                value?: undefined;
            })[];
        };
        signer?: undefined;
        address?: undefined;
    } | {
        name: string;
        address: string;
        writable?: undefined;
        signer?: undefined;
        pda?: undefined;
    })[];
    args: ({
        name: string;
        type: string;
    } | {
        name: string;
        type: {
            array: (string | number)[];
        };
    })[];
    docs?: undefined;
})[];
declare let accounts: {
    name: string;
    discriminator: number[];
}[];
declare let events: {
    name: string;
    discriminator: number[];
}[];
declare let errors: {
    code: number;
    name: string;
    msg: string;
}[];
declare let types: ({
    name: string;
    docs: string[];
    type: {
        kind: string;
        variants: ({
            name: string;
            fields: string[];
        } | {
            name: string;
            fields: {
                array: (string | number)[];
            }[];
        })[];
        fields?: undefined;
    };
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
} | {
    name: string;
    type: {
        kind: string;
        fields: ({
            name: string;
            type: string;
            docs?: undefined;
        } | {
            name: string;
            type: {
                defined: {
                    name: string;
                };
                vec?: undefined;
                array?: undefined;
            };
            docs?: undefined;
        } | {
            name: string;
            docs: string[];
            type: {
                vec: string;
                defined?: undefined;
                array?: undefined;
            };
        } | {
            name: string;
            type: {
                array: (string | number)[];
                defined?: undefined;
                vec?: undefined;
            };
            docs?: undefined;
        })[];
        variants?: undefined;
    };
    docs?: undefined;
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
} | {
    name: string;
    type: {
        kind: string;
        fields: ({
            name: string;
            type: {
                option: string;
                defined?: undefined;
                array?: undefined;
                vec?: undefined;
            };
            docs?: undefined;
        } | {
            name: string;
            type: string;
            docs?: undefined;
        } | {
            name: string;
            type: {
                defined: {
                    name: string;
                };
                option?: undefined;
                array?: undefined;
                vec?: undefined;
            };
            docs?: undefined;
        } | {
            name: string;
            docs: string[];
            type: string;
        } | {
            name: string;
            docs: string[];
            type: {
                array: (string | number)[];
                option?: undefined;
                defined?: undefined;
                vec?: undefined;
            };
        } | {
            name: string;
            docs: string[];
            type: {
                defined: {
                    name: string;
                };
                option?: undefined;
                array?: undefined;
                vec?: undefined;
            };
        } | {
            name: string;
            docs: string[];
            type: {
                vec: string;
                option?: undefined;
                defined?: undefined;
                array?: undefined;
            };
        } | {
            name: string;
            type: {
                vec: {
                    defined: {
                        name: string;
                    };
                };
                option?: undefined;
                defined?: undefined;
                array?: undefined;
            };
            docs?: undefined;
        })[];
        variants?: undefined;
    };
    docs?: undefined;
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
} | {
    name: string;
    docs: string[];
    type: {
        kind: string;
        fields: ({
            name: string;
            type: string;
            docs?: undefined;
        } | {
            name: string;
            docs: string[];
            type: {
                option: string;
                defined?: undefined;
                vec?: undefined;
            };
        } | {
            name: string;
            docs: string[];
            type: string;
        } | {
            name: string;
            docs: string[];
            type: {
                defined: {
                    name: string;
                };
                option?: undefined;
                vec?: undefined;
            };
        } | {
            name: string;
            type: {
                defined: {
                    name: string;
                };
                option?: undefined;
                vec?: undefined;
            };
            docs?: undefined;
        } | {
            name: string;
            docs: string[];
            type: {
                vec: {
                    defined: {
                        name: string;
                    };
                };
                option?: undefined;
                defined?: undefined;
            };
        } | {
            name: string;
            type: {
                option: string;
                defined?: undefined;
                vec?: undefined;
            };
            docs?: undefined;
        } | {
            name: string;
            type: {
                vec: {
                    defined: {
                        name: string;
                    };
                };
                option?: undefined;
                defined?: undefined;
            };
            docs?: undefined;
        })[];
        variants?: undefined;
    };
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
} | {
    name: string;
    docs: string[];
    type: {
        kind: string;
        fields: string[];
        variants?: undefined;
    };
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
} | {
    name: string;
    serialization: string;
    repr: {
        kind: string;
    };
    generics: {
        kind: string;
        name: string;
        type: string;
    }[];
    type: {
        kind: string;
        fields: ({
            name: string;
            type: string;
        } | {
            name: string;
            type: {
                array: (string | number)[];
            };
        } | {
            name: string;
            type: {
                array: (string | {
                    generic: string;
                })[];
            };
        } | {
            name: string;
            type: {
                array: ({
                    defined: {
                        name: string;
                    };
                    generic?: undefined;
                } | {
                    generic: string;
                    defined?: undefined;
                })[];
            };
        })[];
        variants?: undefined;
    };
    docs?: undefined;
} | {
    name: string;
    type: {
        kind: string;
        variants: ({
            name: string;
            fields?: undefined;
        } | {
            name: string;
            fields: ({
                defined: {
                    name: string;
                };
                array?: undefined;
            } | {
                array: (string | number)[];
                defined?: undefined;
            })[];
        })[];
        fields?: undefined;
    };
    docs?: undefined;
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
} | {
    name: string;
    serialization: string;
    repr: {
        kind: string;
    };
    type: {
        kind: string;
        fields: {
            name: string;
            type: {
                defined: {
                    name: string;
                    generics: {
                        kind: string;
                        value: string;
                    }[];
                };
            };
        }[];
        variants?: undefined;
    };
    docs?: undefined;
    generics?: undefined;
} | {
    name: string;
    serialization: string;
    repr: {
        kind: string;
    };
    type: {
        kind: string;
        fields: ({
            name: string;
            type: string;
        } | {
            name: string;
            type: {
                array: (string | number)[];
                defined?: undefined;
            };
        } | {
            name: string;
            type: {
                defined: {
                    name: string;
                };
                array?: undefined;
            };
        })[];
        variants?: undefined;
    };
    docs?: undefined;
    generics?: undefined;
} | {
    name: string;
    serialization: string;
    repr: {
        kind: string;
    };
    type: {
        kind: string;
        fields: ({
            name: string;
            type: {
                array: (number | {
                    defined: {
                        name: string;
                    };
                })[];
            };
            docs?: undefined;
        } | {
            name: string;
            docs: string[];
            type: {
                array: (string | number)[];
            };
        } | {
            name: string;
            type: string;
            docs?: undefined;
        } | {
            name: string;
            type: {
                array: (string | number)[];
            };
            docs?: undefined;
        })[];
        variants?: undefined;
    };
    docs?: undefined;
    generics?: undefined;
} | {
    name: string;
    docs: string[];
    type: {
        kind: string;
        fields: ({
            name: string;
            docs: string[];
            type: {
                option: string;
                defined?: undefined;
                vec?: undefined;
            };
        } | {
            name: string;
            docs: string[];
            type: {
                defined: {
                    name: string;
                };
                option?: undefined;
                vec?: undefined;
            };
        } | {
            name: string;
            docs: string[];
            type: {
                vec: string;
                option?: undefined;
                defined?: undefined;
            };
        } | {
            name: string;
            type: string;
            docs?: undefined;
        })[];
        variants?: undefined;
    };
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
} | {
    name: string;
    docs: string[];
    type: {
        kind: string;
        fields: ({
            name: string;
            docs: string[];
            type: {
                array: (string | number)[];
            };
        } | {
            name: string;
            type: string;
            docs?: undefined;
        })[];
        variants?: undefined;
    };
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
} | {
    name: string;
    type: {
        kind: string;
        fields: ({
            name: string;
            type: {
                vec: string;
                defined?: undefined;
            };
        } | {
            name: string;
            type: {
                defined: {
                    name: string;
                };
                vec?: undefined;
            };
        } | {
            name: string;
            type: string;
        })[];
        variants?: undefined;
    };
    docs?: undefined;
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
} | {
    name: string;
    docs: string[];
    type: {
        kind: string;
        variants: {
            name: string;
        }[];
        fields?: undefined;
    };
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
} | {
    name: string;
    type: {
        kind: string;
        variants: {
            name: string;
            fields: ({
                array: (string | number)[];
                vec?: undefined;
            } | {
                vec: string;
                array?: undefined;
            })[];
        }[];
        fields?: undefined;
    };
    docs?: undefined;
    serialization?: undefined;
    repr?: undefined;
    generics?: undefined;
})[];

declare const arcium_accounts: typeof accounts;
declare const arcium_address: typeof address;
declare const arcium_errors: typeof errors;
declare const arcium_events: typeof events;
declare const arcium_instructions: typeof instructions;
import arcium_metadata = metadata;
declare const arcium_types: typeof types;
declare namespace arcium {
  export {
    arcium_accounts as accounts,
    arcium_address as address,
    arcium_errors as errors,
    arcium_events as events,
    arcium_instructions as instructions,
    arcium_metadata as metadata,
    arcium_types as types,
  };
}

/**
 * The deployed address of the Arcium program, as specified in the IDL.
 */
declare const ARCIUM_ADDR: "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6";

/**
 * Represents a mempool account of any size (tiny, small, medium, or large).
 * Mempools store pending computations prioritized by fee, with a time-to-live of 180 slots.
 * Each size supports different maximum heap capacities:
 * - Tiny: 1 computation
 * - Small: 3 computations
 * - Medium: 10 computations
 * - Large: 100 computations
 */
type MempoolAcc = anchor.IdlTypes<Arcium>['tinyMempool'] | anchor.IdlTypes<Arcium>['smallMempool'] | anchor.IdlTypes<Arcium>['mediumMempool'] | anchor.IdlTypes<Arcium>['largeMempool'];
/**
 * Represents an executing pool account of any size (tiny, small, medium, or large).
 * Executing pools manage parallel computation execution with account locking.
 * Each size supports different maximum parallel computations:
 * - Tiny: 1 parallel computation
 * - Small: 3 parallel computations
 * - Medium: 10 parallel computations
 * - Large: 100 parallel computations
 */
type ExecpoolAcc = anchor.IdlTypes<Arcium>['tinyExecPool'] | anchor.IdlTypes<Arcium>['smallExecPool'] | anchor.IdlTypes<Arcium>['mediumExecPool'] | anchor.IdlTypes<Arcium>['largeExecPool'];
/**
 * Returns the public key of the deployed Arcium program on Solana.
 * @returns The Arcium program's public key.
 */
declare function getArciumProgAddress(): anchor.web3.PublicKey;
/**
 * Fetches and decodes the mempool account data for any mempool account size.
 * @param provider - The Anchor provider to use for fetching accounts.
 * @param mempoolAccPubkey - The public key of the mempool account.
 * @returns The decoded mempool account data.
 * @throws Error if the account cannot be fetched or the discriminator is unknown.
 */
declare function getMempoolAccData(provider: AnchorProvider, mempoolAccPubkey: anchor.web3.PublicKey): Promise<MempoolAcc>;
/**
 * Fetches and decodes the executing pool account data for any pool size.
 * @param provider - The Anchor provider to use for fetching accounts.
 * @param executingPoolAccPubkey - The public key of the executing pool account.
 * @returns The decoded executing pool account data.
 * @throws Error if the account cannot be fetched or the discriminator is unknown.
 */
declare function getExecutingPoolAccData(provider: AnchorProvider, executingPoolAccPubkey: anchor.web3.PublicKey): Promise<ExecpoolAcc>;
/**
 * Fetches and extracts the MXE public key from the MXE account.
 * @param provider - The Anchor provider to use for fetching accounts.
 * @param mxeProgramID - The public key of the MXE program.
 * @returns The MXE's x25519 public key as a Uint8Array, or null if not set.
 */
declare function getMXEPublicKey(provider: AnchorProvider, mxeProgramID: anchor.web3.PublicKey): Promise<Uint8Array | null>;
/**
 * Uploads a circuit to the blockchain, splitting it into multiple accounts if necessary.
 * @param provider - The Anchor provider to use for transactions.
 * @param circuitName - The name of the circuit.
 * @param mxeProgramID - The public key of the MXE program.
 * @param rawCircuit - The raw circuit data as a Uint8Array.
 * @param logging - Whether to log progress (default: true).
 * @param chunkSize - The number of upload transactions to send in parallel (default: 500).
 * @returns An array of transaction signatures for all upload and finalize transactions.
 */
declare function uploadCircuit(provider: AnchorProvider, circuitName: string, mxeProgramID: anchor.web3.PublicKey, rawCircuit: Uint8Array, logging?: boolean, chunkSize?: number): Promise<string[]>;
/**
 * Builds a transaction to finalize a computation definition.
 * @param provider - The Anchor provider to use for transactions.
 * @param compDefOffset - The offset of the computation definition.
 * @param mxeProgramID - The public key of the MXE program.
 * @returns The transaction to finalize the computation definition.
 */
declare function buildFinalizeCompDefTx(provider: AnchorProvider, compDefOffset: number, mxeProgramID: anchor.web3.PublicKey): Promise<anchor.web3.Transaction>;
/**
 * Returns the base seed for an Arcium account, given its name.
 * @param accName - The name of the account.
 * @returns The base seed as a Uint8Array.
 */
declare function getArciumAccountBaseSeed(accName: string): Uint8Array;
/**
 * Computes the offset for a computation definition account, based on the circuit name.
 * @param circuitName - The name of the circuit.
 * @returns The offset as a 4-byte Uint8Array.
 */
declare function getCompDefAccOffset(circuitName: string): Uint8Array;
/**
 * Returns an Anchor program instance for the Arcium program.
 * @param provider - The Anchor provider to use.
 * @returns The Anchor program instance for Arcium.
 */
declare function getArciumProgram(provider: AnchorProvider): Program<Arcium>;
/**
 * Returns a read-only Anchor program instance for the Arcium program.
 * @param provider - The Anchor provider to use.
 * @returns The Anchor program instance for Arcium.
 */
declare function getArciumProgramReadonly(provider: AnchorProvider): Program<Arcium>;
/**
 * Returns the PDA (program-derived address) for an ArxNode account given the program ID and node offset.
 * @param arciumProgramID - The public key of the Arcium program.
 * @param nodeOffset - The offset of the node.
 * @returns The PDA for the ArxNode account.
 */
declare function getArxAccPDA(arciumProgramID: anchor.web3.PublicKey, nodeOffset: number): anchor.web3.PublicKey;

/**
 * Structure representing the local Arcium environment variables required for local development or testing.
 */
type ArciumLocalEnv = {
    arciumClusterPubkey: PublicKey;
};
/**
 * Reads local Arcium environment information from environment variables.
 * Only available in Node.js and when testing locally.
 * @returns The local Arcium environment configuration.
 * @throws Error if called in a browser or if required environment variables are missing or invalid.
 */
declare function getArciumEnv(): ArciumLocalEnv;

/**
 * Represents possible error messages that can occur during computation processing or transaction handling.
 */
type ComputationErrorType = `Transaction ${string} not found` | 'Transaction inner instructions not found' | `Transaction failed with error: ${string}` | 'No log messages found' | 'No queue computation instruction found' | `Invalid computation offset: ${string}` | 'Computation not found in executing pool, might have already executed' | `Error fetching transactions: ${string}` | `Instruction at index ${number} not found` | 'Account keys or program ID index not found' | `No Program ID found for instruction at index ${number}` | 'Max retries reached while searching for transaction';
/**
 * Waits for the finalization of a computation by listening for the finalizeComputationEvent.
 * Resolves with the transaction signature once the computation is finalized.
 * @param provider - The Anchor provider to use for event listening.
 * @param computationOffset - The offset of the computation to wait for.
 * @param mxeProgramId - The public key of the MXE program.
 * @param commitment - (Optional) The desired finality/commitment level (default: 'confirmed').
 * @returns The transaction signature of the finalization event.
 */
declare function awaitComputationFinalization(provider: AnchorProvider, computationOffset: BN, mxeProgramId: PublicKey, commitment?: Finality): Promise<string>;

/**
 * Returns the public key of the deployed Arcium program on Solana.
 * @returns The Arcium program's public key.
 */
declare function getArciumProgramId(): PublicKey;
/**
 * Derives the computation account address for a given MXE program ID and offset.
 * @param mxeProgramId - The public key of the MXE program.
 * @param offset - The computation offset as an anchor.BN.
 * @returns The derived computation account public key.
 */
declare function getComputationAccAddress(mxeProgramId: PublicKey, offset: anchor.BN): PublicKey;
/**
 * Derives the mempool account address for a given MXE program ID.
 * @param mxeProgramId - The public key of the MXE program.
 * @returns The derived mempool account public key.
 */
declare function getMempoolAccAddress(mxeProgramId: PublicKey): PublicKey;
/**
 * Derives the executing pool account address for a given MXE program ID.
 * @param mxeProgramId - The public key of the MXE program.
 * @returns The derived executing pool account public key.
 */
declare function getExecutingPoolAccAddress(mxeProgramId: PublicKey): PublicKey;
/**
 * Derives the staking pool account address.
 * @returns The derived staking pool account public key.
 */
declare function getStakingPoolAccAddress(): PublicKey;
/**
 * Derives the clock account address.
 * @returns The derived clock account public key.
 */
declare function getClockAccAddress(): PublicKey;
/**
 * Derives the cluster account address for a given offset.
 * @param offset - The cluster offset as a number.
 * @returns The derived cluster account public key.
 */
declare function getClusterAccAddress(offset: number): PublicKey;
/**
 * Derives the ArxNode account address for a given offset.
 * @param offset - The ArxNode offset as a number.
 * @returns The derived ArxNode account public key.
 */
declare function getArxNodeAccAddress(offset: number): PublicKey;
/**
 * Derives the MXE account address for a given MXE program ID.
 * @param mxeProgramId - The public key of the MXE program.
 * @returns The derived MXE account public key.
 */
declare function getMXEAccAddress(mxeProgramId: PublicKey): PublicKey;
/**
 * Derives the computation definition account address for a given MXE program ID and offset.
 * @param mxeProgramId - The public key of the MXE program.
 * @param offset - The computation definition offset as a number.
 * @returns The derived computation definition account public key.
 */
declare function getCompDefAccAddress(mxeProgramId: PublicKey, offset: number): PublicKey;

/**
 * Compresses an array of bytes into 128-bit bigints.
 *
 * Takes an array of bytes whose length is a multiple of 16 and compresses each consecutive 16 bytes into a single 128-bit bigint.
 *
 * @param bytes - The input byte array. Its length must be a multiple of 16.
 * @returns An array of 128-bit bigints, each representing 16 bytes from the input.
 * @throws Error if the input length is not a multiple of 16.
 */
declare function compressUint128(bytes: Uint8Array): bigint[];
/**
 * Decompresses an array of 128-bit bigints into a flattened byte array.
 *
 * Takes an array of 128-bit bigints and returns a Uint8Array containing the decompressed bytes (16 bytes per bigint).
 *
 * @param compressed - The input array of 128-bit bigints. Each bigint must be less than 2^128.
 * @returns A Uint8Array containing the decompressed bytes.
 * @throws Error if any bigint in the input is not less than 2^128.
 */
declare function decompressUint128(compressed: bigint[]): Uint8Array;

export { ARCIUM_ADDR, arcium as ARCIUM_IDL, Aes128Cipher, Aes192Cipher, Aes256Cipher, CURVE25519_BASE_FIELD, CURVE25519_SCALAR_FIELD_MODULUS, Matrix, RescueCipher, RescueDesc, RescuePrimeHash, arcisEd25519, awaitComputationFinalization, buildFinalizeCompDefTx, compressUint128, decompressUint128, deserializeLE, generateRandomFieldElem, getArciumAccountBaseSeed, getArciumEnv, getArciumProgAddress, getArciumProgram, getArciumProgramId, getArciumProgramReadonly, getArxAccPDA, getArxNodeAccAddress, getClockAccAddress, getClusterAccAddress, getCompDefAccAddress, getCompDefAccOffset, getComputationAccAddress, getExecutingPoolAccAddress, getExecutingPoolAccData, getMXEAccAddress, getMXEPublicKey, getMempoolAccAddress, getMempoolAccData, getStakingPoolAccAddress, positiveModulo, randMatrix, serializeLE, sha256, toVec, uploadCircuit };
export type { Arcium as ArciumIdlType, ArciumLocalEnv, ComputationErrorType, FpField };
