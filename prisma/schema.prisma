// ClimeMate Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model - linked to Privy authentication
model User {
  id        String   @id @default(cuid())
  privyId   String   @unique // Privy user ID
  email     String?  @unique
  walletAddress String? // Removed @unique - users can link same wallet to different accounts
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  emissionData    EmissionData[]
  certificates    Certificate[]
  carbonCredits   CarbonCredit[]
  ghgCalculations GHGCalculation[]
  semaAssessments SEMAAssessment[]
  semaClients     SEMAClient[]

  @@index([privyId])
  @@index([email])
  @@index([walletAddress])
}

// Emission Data from uploaded files
model EmissionData {
  id              String   @id @default(cuid())
  userId          String
  fileName        String
  totalEmissions  Float
  breakdown       Json     // Category breakdown
  rawData         Json     // Original uploaded data
  processedData   Json     // Processed calculations
  status          String   @default("completed")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificates Certificate[]

  @@index([userId])
  @@index([createdAt])
}

// Generated Certificates
model Certificate {
  id              String   @id @default(cuid())
  userId          String
  emissionDataId  String?
  certificateId   String   @unique // e.g., "GHG-2024-001"
  title           String
  totalEmissions  Float
  breakdown       Json
  processedData   Json?    // Detailed emission activities
  summary         Json?    // Summary data (scope, categories, etc.)
  status          String   @default("verified")
  issueDate       DateTime @default(now())
  validUntil      DateTime
  dataHash        String?  // For blockchain verification
  blockchainTx    String?  // Solana NFT transaction hash
  nftAddress      String?  // Solana NFT mint address
  metadataUri     String?  // NFT metadata URI
  logTransactionSignature String? // Solana memo log transaction
  ipfsCid         String?  // IPFS metadata (legacy)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  emissionData EmissionData? @relation(fields: [emissionDataId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([certificateId])
  @@index([status])
}

// Carbon Credits from Marketplace
model CarbonCredit {
  id              String   @id @default(cuid())
  userId          String
  projectTitle    String
  projectType     String
  amount          Float    // Amount of credits purchased
  pricePerUnit    Float
  totalPrice      Float
  location        String
  vintage         String
  transactionHash String?  // Blockchain transaction
  status          String   @default("completed")
  purchaseDate    DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([purchaseDate])
}

// GHG Calculator Entries
model GHGCalculation {
  id              String   @id @default(cuid())
  userId          String
  orgName         String
  scope           String
  category        String
  fuelCategory    String
  fuelType        String
  amount          Float
  unitType        String
  baseFactor      Float
  convertedFactor Float
  emissions       Float
  equipmentType   String?
  timestamp       DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
}

// SEMA Assessments
model SEMAAssessment {
  id              String   @id @default(cuid())
  userId          String
  clientName      String
  assessmentType  String   // "stakeholder", "materiality", etc.
  data            Json     // Flexible JSON for different assessment types
  status          String   @default("in_progress")
  completedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([clientName])
}

// SEMA Clients
model SEMAClient {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  industry    String
  size        String   // Small, Medium, Large, Enterprise
  status      String   @default("active") // active, inactive, demo
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  stakeholders SEMAStakeholder[]
  blockchainLogs SEMABlockchainLog[]

  @@index([userId])
  @@index([status])
}

// SEMA Stakeholders
model SEMAStakeholder {
  id                        String   @id @default(cuid())
  clientId                  String
  name                      String
  category                  String   // Internal, External
  stakeholderType           String?
  dependencyEconomic        Int      @default(3)
  dependencySocial          Int      @default(3)
  dependencyEnvironmental   Int      @default(3)
  influenceEconomic         Int      @default(3)
  influenceSocial           Int      @default(3)
  influenceEnvironmental    Int      @default(3)
  populationSize            Int      @default(0)
  totalScore                Int      @default(18)
  dependencyCategory        String   @default("Medium")
  influenceCategory         String   @default("Medium")
  isPriority                Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  client SEMAClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([isPriority])
}

// SEMA Blockchain Logs
model SEMABlockchainLog {
  id                    String   @id @default(cuid())
  clientId              String
  action                String   // client_added, client_updated, client_deleted, stakeholder_added, etc.
  dataHash              String
  transactionSignature  String?
  status                String   @default("pending") // pending, success, error
  error                 String?
  metadata              Json?    // Additional data about the action
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  client SEMAClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([status])
  @@index([createdAt])
}

// SEMA Sample Parameters
model SEMASampleParameters {
  id                  String   @id @default(cuid())
  clientId            String   @unique
  confidenceLevel     Float    @default(0.95)
  marginError         Float    @default(0.05)
  populationProportion Float   @default(0.5)
  zScore              Float    @default(1.96)
  baseSampleSize      Int      @default(384)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([clientId])
}

// SEMA Material Topics (External Materiality)
model SEMAMaterialTopic {
  id            String   @id @default(cuid())
  clientId      String
  name          String
  description   String?
  category      String   // Economic, Environmental, Social
  griCode       String?
  averageScore  Float    @default(0)
  responseCount Int      @default(0)
  isMaterial    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  responses SEMAQuestionnaireResponse[]

  @@index([clientId])
  @@index([isMaterial])
}

// SEMA Internal Topics (Internal Materiality)
model SEMAInternalTopic {
  id           String   @id @default(cuid())
  clientId     String
  name         String
  description  String?
  category     String   // Economic, Environmental, Social
  severity     Int      @default(3)
  likelihood   Int      @default(3)
  significance Int      @default(9)
  isMaterial   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([clientId])
  @@index([isMaterial])
}

// SEMA Questionnaire Responses
model SEMAQuestionnaireResponse {
  id              String   @id @default(cuid())
  topicId         String
  stakeholderType String
  respondentName  String?
  score           Int
  comments        String?
  responseTime    Int?     // Time taken to respond in seconds
  createdAt       DateTime @default(now())

  topic SEMAMaterialTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId])
  @@index([stakeholderType])
}

// SEMA Reports
model SEMAReport {
  id              String   @id @default(cuid())
  clientId        String
  title           String
  reportType      String   // materiality_assessment, stakeholder_engagement, full_sema
  materialTopics  Json     @default("[]")
  griDisclosures  Json     @default("{}")
  processSummary  Json     @default("{}")
  status          String   @default("draft") // draft, final, published
  generatedAt     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([clientId])
  @@index([status])
}
